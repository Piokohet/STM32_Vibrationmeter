
T5_L09_ADCSingleConversionDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f24  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018538  08018538  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08018538  08018538  00028538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018540  08018540  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018540  08018540  00028540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018544  08018544  00028544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08018548  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025dc  20000070  080185b8  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000264c  080185b8  0003264c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a82  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002933  00000000  00000000  00041b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00044458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000452c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184f4  00000000  00000000  00045fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123cb  00000000  00000000  0005e4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b40d  00000000  00000000  00070887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0010bc94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  0010bd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  0010f8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080050a4 	.word	0x080050a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080050a4 	.word	0x080050a4

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b974 	b.w	8000598 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9d08      	ldr	r5, [sp, #32]
 80002ce:	4604      	mov	r4, r0
 80002d0:	468e      	mov	lr, r1
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d14d      	bne.n	8000372 <__udivmoddi4+0xaa>
 80002d6:	428a      	cmp	r2, r1
 80002d8:	4694      	mov	ip, r2
 80002da:	d969      	bls.n	80003b0 <__udivmoddi4+0xe8>
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	b152      	cbz	r2, 80002f8 <__udivmoddi4+0x30>
 80002e2:	fa01 f302 	lsl.w	r3, r1, r2
 80002e6:	f1c2 0120 	rsb	r1, r2, #32
 80002ea:	fa20 f101 	lsr.w	r1, r0, r1
 80002ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f2:	ea41 0e03 	orr.w	lr, r1, r3
 80002f6:	4094      	lsls	r4, r2
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	0c21      	lsrs	r1, r4, #16
 80002fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000302:	fa1f f78c 	uxth.w	r7, ip
 8000306:	fb08 e316 	mls	r3, r8, r6, lr
 800030a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800030e:	fb06 f107 	mul.w	r1, r6, r7
 8000312:	4299      	cmp	r1, r3
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x64>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 30ff 	add.w	r0, r6, #4294967295
 800031e:	f080 811f 	bcs.w	8000560 <__udivmoddi4+0x298>
 8000322:	4299      	cmp	r1, r3
 8000324:	f240 811c 	bls.w	8000560 <__udivmoddi4+0x298>
 8000328:	3e02      	subs	r6, #2
 800032a:	4463      	add	r3, ip
 800032c:	1a5b      	subs	r3, r3, r1
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb3 f0f8 	udiv	r0, r3, r8
 8000334:	fb08 3310 	mls	r3, r8, r0, r3
 8000338:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033c:	fb00 f707 	mul.w	r7, r0, r7
 8000340:	42a7      	cmp	r7, r4
 8000342:	d90a      	bls.n	800035a <__udivmoddi4+0x92>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 33ff 	add.w	r3, r0, #4294967295
 800034c:	f080 810a 	bcs.w	8000564 <__udivmoddi4+0x29c>
 8000350:	42a7      	cmp	r7, r4
 8000352:	f240 8107 	bls.w	8000564 <__udivmoddi4+0x29c>
 8000356:	4464      	add	r4, ip
 8000358:	3802      	subs	r0, #2
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	1be4      	subs	r4, r4, r7
 8000360:	2600      	movs	r6, #0
 8000362:	b11d      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000364:	40d4      	lsrs	r4, r2
 8000366:	2300      	movs	r3, #0
 8000368:	e9c5 4300 	strd	r4, r3, [r5]
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	428b      	cmp	r3, r1
 8000374:	d909      	bls.n	800038a <__udivmoddi4+0xc2>
 8000376:	2d00      	cmp	r5, #0
 8000378:	f000 80ef 	beq.w	800055a <__udivmoddi4+0x292>
 800037c:	2600      	movs	r6, #0
 800037e:	e9c5 0100 	strd	r0, r1, [r5]
 8000382:	4630      	mov	r0, r6
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	fab3 f683 	clz	r6, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d14a      	bne.n	8000428 <__udivmoddi4+0x160>
 8000392:	428b      	cmp	r3, r1
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xd4>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80f9 	bhi.w	800058e <__udivmoddi4+0x2c6>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb61 0303 	sbc.w	r3, r1, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	469e      	mov	lr, r3
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e0      	beq.n	800036c <__udivmoddi4+0xa4>
 80003aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ae:	e7dd      	b.n	800036c <__udivmoddi4+0xa4>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xec>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f282 	clz	r2, r2
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	f040 8092 	bne.w	80004e2 <__udivmoddi4+0x21a>
 80003be:	eba1 010c 	sub.w	r1, r1, ip
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2601      	movs	r6, #1
 80003cc:	0c20      	lsrs	r0, r4, #16
 80003ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80003d2:	fb07 1113 	mls	r1, r7, r3, r1
 80003d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003da:	fb0e f003 	mul.w	r0, lr, r3
 80003de:	4288      	cmp	r0, r1
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x12c>
 80003e2:	eb1c 0101 	adds.w	r1, ip, r1
 80003e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x12a>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 80003f2:	4643      	mov	r3, r8
 80003f4:	1a09      	subs	r1, r1, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000400:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x156>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 31ff 	add.w	r1, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x154>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2ca>
 800041c:	4608      	mov	r0, r1
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000426:	e79c      	b.n	8000362 <__udivmoddi4+0x9a>
 8000428:	f1c6 0720 	rsb	r7, r6, #32
 800042c:	40b3      	lsls	r3, r6
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa20 f407 	lsr.w	r4, r0, r7
 800043a:	fa01 f306 	lsl.w	r3, r1, r6
 800043e:	431c      	orrs	r4, r3
 8000440:	40f9      	lsrs	r1, r7
 8000442:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000446:	fa00 f306 	lsl.w	r3, r0, r6
 800044a:	fbb1 f8f9 	udiv	r8, r1, r9
 800044e:	0c20      	lsrs	r0, r4, #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fb09 1118 	mls	r1, r9, r8, r1
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	fb08 f00e 	mul.w	r0, r8, lr
 8000460:	4288      	cmp	r0, r1
 8000462:	fa02 f206 	lsl.w	r2, r2, r6
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000468:	eb1c 0101 	adds.w	r1, ip, r1
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2bc>
 8000474:	4288      	cmp	r0, r1
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2bc>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4461      	add	r1, ip
 8000480:	1a09      	subs	r1, r1, r0
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb1 f0f9 	udiv	r0, r1, r9
 8000488:	fb09 1110 	mls	r1, r9, r0, r1
 800048c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000490:	fb00 fe0e 	mul.w	lr, r0, lr
 8000494:	458e      	cmp	lr, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1e2>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2b4>
 80004a2:	458e      	cmp	lr, r1
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2b4>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ae:	fba0 9402 	umull	r9, r4, r0, r2
 80004b2:	eba1 010e 	sub.w	r1, r1, lr
 80004b6:	42a1      	cmp	r1, r4
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46a6      	mov	lr, r4
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x2a4>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x2a0>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x212>
 80004c2:	ebb3 0208 	subs.w	r2, r3, r8
 80004c6:	eb61 010e 	sbc.w	r1, r1, lr
 80004ca:	fa01 f707 	lsl.w	r7, r1, r7
 80004ce:	fa22 f306 	lsr.w	r3, r2, r6
 80004d2:	40f1      	lsrs	r1, r6
 80004d4:	431f      	orrs	r7, r3
 80004d6:	e9c5 7100 	strd	r7, r1, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	40d8      	lsrs	r0, r3
 80004e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ec:	fa21 f303 	lsr.w	r3, r1, r3
 80004f0:	4091      	lsls	r1, r2
 80004f2:	4301      	orrs	r1, r0
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000500:	fb07 3610 	mls	r6, r7, r0, r3
 8000504:	0c0b      	lsrs	r3, r1, #16
 8000506:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800050a:	fb00 f60e 	mul.w	r6, r0, lr
 800050e:	429e      	cmp	r6, r3
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x260>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b8>
 8000520:	429e      	cmp	r6, r3
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b8>
 8000524:	3802      	subs	r0, #2
 8000526:	4463      	add	r3, ip
 8000528:	1b9b      	subs	r3, r3, r6
 800052a:	b289      	uxth	r1, r1
 800052c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000530:	fb07 3316 	mls	r3, r7, r6, r3
 8000534:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000538:	fb06 f30e 	mul.w	r3, r6, lr
 800053c:	428b      	cmp	r3, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x28a>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f106 38ff 	add.w	r8, r6, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2b0>
 800054a:	428b      	cmp	r3, r1
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2b0>
 800054e:	3e02      	subs	r6, #2
 8000550:	4461      	add	r1, ip
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0x104>
 800055a:	462e      	mov	r6, r5
 800055c:	4628      	mov	r0, r5
 800055e:	e705      	b.n	800036c <__udivmoddi4+0xa4>
 8000560:	4606      	mov	r6, r0
 8000562:	e6e3      	b.n	800032c <__udivmoddi4+0x64>
 8000564:	4618      	mov	r0, r3
 8000566:	e6f8      	b.n	800035a <__udivmoddi4+0x92>
 8000568:	454b      	cmp	r3, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f8>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000574:	3801      	subs	r0, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f8>
 8000578:	4646      	mov	r6, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x28a>
 800057c:	4620      	mov	r0, r4
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1e2>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x260>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b8>
 8000588:	3b02      	subs	r3, #2
 800058a:	4461      	add	r1, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x12c>
 800058e:	4630      	mov	r0, r6
 8000590:	e709      	b.n	80003a6 <__udivmoddi4+0xde>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x156>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_ADC1_Init+0xa0>)
 80005b0:	4a23      	ldr	r2, [pc, #140]	; (8000640 <MX_ADC1_Init+0xa4>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0xa0>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0xa0>)
 80005be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0xa0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0xa0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0xa0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_ADC1_Init+0xa0>)
 80005da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_ADC1_Init+0xa0>)
 80005e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0xa0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_ADC1_Init+0xa0>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0xa0>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0xa0>)
 80005fe:	2201      	movs	r2, #1
 8000600:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <MX_ADC1_Init+0xa0>)
 8000604:	f000 fd7c 	bl	8001100 <HAL_ADC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800060e:	f000 fb4d 	bl	8000cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <MX_ADC1_Init+0xa0>)
 8000624:	f000 feaa 	bl	800137c <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800062e:	f000 fb3d 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000008c 	.word	0x2000008c
 8000640:	40012000 	.word	0x40012000

08000644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a2e      	ldr	r2, [pc, #184]	; (800071c <HAL_ADC_MspInit+0xd8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d155      	bne.n	8000712 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	4a2c      	ldr	r2, [pc, #176]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000674:	6453      	str	r3, [r2, #68]	; 0x44
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 80006b2:	f001 fd95 	bl	80021e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f6:	480c      	ldr	r0, [pc, #48]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006f8:	f001 fa02 	bl	8001b00 <HAL_DMA_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000702:	f000 fad3 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 800070a:	639a      	str	r2, [r3, #56]	; 0x38
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	200000d4 	.word	0x200000d4
 800072c:	40026410 	.word	0x40026410

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_DMA_Init+0x68>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_DMA_Init+0x68>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_DMA_Init+0x68>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_DMA_Init+0x68>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <MX_DMA_Init+0x68>)
 800075c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_DMA_Init+0x68>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	2011      	movs	r0, #17
 8000774:	f001 f98d 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000778:	2011      	movs	r0, #17
 800077a:	f001 f9a6 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2038      	movs	r0, #56	; 0x38
 8000784:	f001 f985 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000788:	2038      	movs	r0, #56	; 0x38
 800078a:	f001 f99e 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a1e      	ldr	r2, [pc, #120]	; (800086c <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <MX_GPIO_Init+0xd0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2130      	movs	r1, #48	; 0x30
 8000826:	4812      	ldr	r0, [pc, #72]	; (8000870 <MX_GPIO_Init+0xd4>)
 8000828:	f001 fe5e 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0xd8>)
 8000844:	f001 fccc 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = A2_Pin|LD2_Pin;
 8000848:	2330      	movs	r3, #48	; 0x30
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_GPIO_Init+0xd4>)
 8000860:	f001 fcbe 	bl	80021e0 <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020800 	.word	0x40020800

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 fbcd 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f853 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f7ff ff89 	bl	800079c <MX_GPIO_Init>
  MX_DMA_Init();
 800088a:	f7ff ff51 	bl	8000730 <MX_DMA_Init>
  MX_ADC1_Init();
 800088e:	f7ff fe85 	bl	800059c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000892:	f000 fa89 	bl	8000da8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000896:	f000 faf3 	bl	8000e80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_OK != HAL_TIM_Base_Start(&htim2)) Error_Handler();
 800089a:	481e      	ldr	r0, [pc, #120]	; (8000914 <main+0x9c>)
 800089c:	f002 fb26 	bl	8002eec <HAL_TIM_Base_Start>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <main+0x32>
 80008a6:	f000 fa01 	bl	8000cac <Error_Handler>
  if(HAL_OK != HAL_ADC_Start_DMA(&hadc1,(uint32_t*) AdcValue, FFT_SAMPLES) ) Error_Handler();
 80008aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ae:	491a      	ldr	r1, [pc, #104]	; (8000918 <main+0xa0>)
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <main+0xa4>)
 80008b2:	f000 fc69 	bl	8001188 <HAL_ADC_Start_DMA>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <main+0x48>
 80008bc:	f000 f9f6 	bl	8000cac <Error_Handler>
//  if(HAL_OK != HAL_UART_Transmit_DMA(&huart2,(uint8_t*) AdcValue, FFT_SAMPLES)) Error_Handler();

  arm_rfft_fast_init_f32(&FFTHandler, FFT_SAMPLES);
 80008c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c4:	4816      	ldr	r0, [pc, #88]	; (8000920 <main+0xa8>)
 80008c6:	f003 fa49 	bl	8003d5c <arm_rfft_fast_init_f32>
	  if(0 != RB_Read(&buf_t,&tmp)) Error_Handler();
	  size = sprintf((char*)chartmp, "%i\n", tmp);
	  HAL_UART_Transmit_DMA(&huart2,chartmp,size);
	  */

	  if(SamplesReady == 1)
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <main+0xac>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d1fa      	bne.n	80008ca <main+0x52>
	  {
		  SamplesReady = 0;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <main+0xac>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]

		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	e011      	b.n	8000904 <main+0x8c>
		  {
			  FFTInBuffer[i] =  (float)AdcValue[i];
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <main+0xa0>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	ee07 3a90 	vmov	s15, r3
 80008ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f2:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <main+0xb0>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	edc3 7a00 	vstr	s15, [r3]
		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3301      	adds	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800090a:	d3e9      	bcc.n	80008e0 <main+0x68>
		  }

		  CalculateFFT();
 800090c:	f000 f8e0 	bl	8000ad0 <CalculateFFT>
	  if(SamplesReady == 1)
 8000910:	e7db      	b.n	80008ca <main+0x52>
 8000912:	bf00      	nop
 8000914:	2000255c 	.word	0x2000255c
 8000918:	20000134 	.word	0x20000134
 800091c:	2000008c 	.word	0x2000008c
 8000920:	20002534 	.word	0x20002534
 8000924:	2000254c 	.word	0x2000254c
 8000928:	20000534 	.word	0x20000534

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fa0c 	bl	8004d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <SystemClock_Config+0xcc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <SystemClock_Config+0xcc>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <SystemClock_Config+0xd0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <SystemClock_Config+0xd0>)
 8000976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2310      	movs	r3, #16
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800099c:	2310      	movs	r3, #16
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009aa:	2304      	movs	r3, #4
 80009ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fdb2 	bl	800251c <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009be:	f000 f975 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2302      	movs	r3, #2
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2102      	movs	r1, #2
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f814 	bl	8002a0c <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ea:	f000 f95f 	bl	8000cac <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <HAL_ADC_ConvHalfCpltCallback>:
	}
}
*/

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d10a      	bne.n	8000a28 <HAL_ADC_ConvHalfCpltCallback+0x28>
	{
		if(HAL_OK != HAL_UART_Transmit_DMA(&huart2,(uint8_t*) AdcValue, 512)) Error_Handler();
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	4907      	ldr	r1, [pc, #28]	; (8000a34 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000a1a:	f002 fd5f 	bl	80034dc <HAL_UART_Transmit_DMA>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_ADC_ConvHalfCpltCallback+0x28>
 8000a24:	f000 f942 	bl	8000cac <Error_Handler>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40012000 	.word	0x40012000
 8000a34:	20000134 	.word	0x20000134
 8000a38:	200025a4 	.word	0x200025a4

08000a3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_ADC_ConvCpltCallback+0x48>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d115      	bne.n	8000a7a <HAL_ADC_ConvCpltCallback+0x3e>
		if(0 != RB_Write(&buf_t,AdcValue[i])) Error_Handler();
		*/
//		i++;
//		HAL_GPIO_TogglePin(A2_GPIO_Port,A2_Pin); //output for oscilloscope

		if(HAL_OK != HAL_ADC_Start_DMA(&hadc1,(uint32_t*)AdcValue, FFT_SAMPLES) ) Error_Handler();
 8000a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a52:	490d      	ldr	r1, [pc, #52]	; (8000a88 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <HAL_ADC_ConvCpltCallback+0x50>)
 8000a56:	f000 fb97 	bl	8001188 <HAL_ADC_Start_DMA>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_ADC_ConvCpltCallback+0x28>
 8000a60:	f000 f924 	bl	8000cac <Error_Handler>

		if(i == FFT_SAMPLES)
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_ADC_ConvCpltCallback+0x54>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a6c:	d105      	bne.n	8000a7a <HAL_ADC_ConvCpltCallback+0x3e>
		{
			i = 0;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_ADC_ConvCpltCallback+0x54>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	801a      	strh	r2, [r3, #0]
			SamplesReady = 1;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_ADC_ConvCpltCallback+0x58>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40012000 	.word	0x40012000
 8000a88:	20000134 	.word	0x20000134
 8000a8c:	2000008c 	.word	0x2000008c
 8000a90:	2000255a 	.word	0x2000255a
 8000a94:	2000254c 	.word	0x2000254c

08000a98 <complexABS>:

float complexABS(float real,float compl){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000aa2:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8000aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aaa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000aae:	edd7 7a00 	vldr	s15, [r7]
 8000ab2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aba:	eeb0 0a67 	vmov.f32	s0, s15
 8000abe:	f004 f981 	bl	8004dc4 <sqrtf>
 8000ac2:	eef0 7a40 	vmov.f32	s15, s0
}
 8000ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <CalculateFFT>:

void CalculateFFT(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
	arm_rfft_fast_f32(&FFTHandler, FFTInBuffer, FFTOutBuffer, 0);
 8000ada:	2300      	movs	r3, #0
 8000adc:	4a6f      	ldr	r2, [pc, #444]	; (8000c9c <CalculateFFT+0x1cc>)
 8000ade:	4970      	ldr	r1, [pc, #448]	; (8000ca0 <CalculateFFT+0x1d0>)
 8000ae0:	4870      	ldr	r0, [pc, #448]	; (8000ca4 <CalculateFFT+0x1d4>)
 8000ae2:	f003 f9bf 	bl	8003e64 <arm_rfft_fast_f32>

	int Freqs[FFT_SAMPLES] = {0};
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	3b0c      	subs	r3, #12
 8000aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 f930 	bl	8004d58 <memset>
	int FreqPoint = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000afe:	f102 020c 	add.w	r2, r2, #12
 8000b02:	6013      	str	r3, [r2, #0]
	int Offset = 45; //variable noise floor offset
 8000b04:	232d      	movs	r3, #45	; 0x2d
 8000b06:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b0a:	f102 0204 	add.w	r2, r2, #4
 8000b0e:	6013      	str	r3, [r2, #0]

	//calculate abs values and linear-to-dB
	for (int i = 0; i < FFT_SAMPLES; i = i + 2)
 8000b10:	2300      	movs	r3, #0
 8000b12:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b16:	f102 0208 	add.w	r2, r2, #8
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e06d      	b.n	8000bfa <CalculateFFT+0x12a>
	{

		Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 8000b1e:	4a5f      	ldr	r2, [pc, #380]	; (8000c9c <CalculateFFT+0x1cc>)
 8000b20:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000b24:	f103 0308 	add.w	r3, r3, #8
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000b36:	f103 0308 	add.w	r3, r3, #8
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a57      	ldr	r2, [pc, #348]	; (8000c9c <CalculateFFT+0x1cc>)
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	ed93 7a00 	vldr	s14, [r3]
 8000b48:	eef0 0a47 	vmov.f32	s1, s14
 8000b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b50:	f7ff ffa2 	bl	8000a98 <complexABS>
 8000b54:	eef0 7a40 	vmov.f32	s15, s0
 8000b58:	eeb0 0a67 	vmov.f32	s0, s15
 8000b5c:	f004 f904 	bl	8004d68 <log10f>
 8000b60:	eef0 7a40 	vmov.f32	s15, s0
 8000b64:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b70:	ee17 2a90 	vmov	r2, s15
 8000b74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000b78:	f103 0304 	add.w	r3, r3, #4
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1ad2      	subs	r2, r2, r3
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000b8a:	f103 030c 	add.w	r3, r3, #12
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	f843 2c0c 	str.w	r2, [r3, #-12]

		if(Freqs[FreqPoint] < 0)
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000ba2:	f103 030c 	add.w	r3, r3, #12
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da0c      	bge.n	8000bce <CalculateFFT+0xfe>
		{
			Freqs[FreqPoint] = 0;
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	461a      	mov	r2, r3
 8000bba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000bbe:	f103 030c 	add.w	r3, r3, #12
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f843 2c0c 	str.w	r2, [r3, #-12]
		}
		FreqPoint++;
 8000bce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000bd2:	f103 030c 	add.w	r3, r3, #12
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000bde:	f102 020c 	add.w	r2, r2, #12
 8000be2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < FFT_SAMPLES; i = i + 2)
 8000be4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000be8:	f103 0308 	add.w	r3, r3, #8
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000bf4:	f102 0208 	add.w	r2, r2, #8
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000bfe:	f103 0308 	add.w	r3, r3, #8
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c08:	db89      	blt.n	8000b1e <CalculateFFT+0x4e>

	}
//  for 1024 samples

	OutFreqArray[0] = (uint8_t)Freqs[1]; // 22 Hz
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c16:	701a      	strb	r2, [r3, #0]
	OutFreqArray[1] = (uint8_t)Freqs[2]; // 63 Hz
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c24:	705a      	strb	r2, [r3, #1]
	OutFreqArray[2] = (uint8_t)Freqs[3]; // 125 Hz
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c30:	709a      	strb	r2, [r3, #2]
	OutFreqArray[3] = (uint8_t)Freqs[6]; // 250 Hz
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c3c:	70da      	strb	r2, [r3, #3]
	OutFreqArray[4] = (uint8_t)Freqs[12]; // 500 Hz
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c48:	711a      	strb	r2, [r3, #4]
	OutFreqArray[5] = (uint8_t)Freqs[23]; // 1000 Hz
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c54:	715a      	strb	r2, [r3, #5]
	OutFreqArray[6] = (uint8_t)Freqs[51]; // 2200 Hz
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c62:	719a      	strb	r2, [r3, #6]
	OutFreqArray[7] = (uint8_t)Freqs[104]; // 4500 Hz
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c70:	71da      	strb	r2, [r3, #7]
	OutFreqArray[8] = (uint8_t)Freqs[207]; // 9000 Hz
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c7e:	721a      	strb	r2, [r3, #8]
	OutFreqArray[9] = (uint8_t)Freqs[344]; // 15000 Hz
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <CalculateFFT+0x1d8>)
 8000c8c:	725a      	strb	r2, [r3, #9]
	OutFreqArray[7] = (uint8_t)Freqs[207]; // 4500 Hz
	OutFreqArray[8] = (uint8_t)Freqs[413]; // 9000 Hz
	OutFreqArray[9] = (uint8_t)Freqs[688]; // 15000 Hz
*/

}
 8000c8e:	bf00      	nop
 8000c90:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20001534 	.word	0x20001534
 8000ca0:	20000534 	.word	0x20000534
 8000ca4:	20002534 	.word	0x20002534
 8000ca8:	20002550 	.word	0x20002550

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	f000 fec0 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f9b4 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <DMA1_Stream6_IRQHandler+0x10>)
 8000d62:	f000 ffd3 	bl	8001d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200025e8 	.word	0x200025e8

08000d70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <DMA2_Stream0_IRQHandler+0x10>)
 8000d76:	f000 ffc9 	bl	8001d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000d4 	.word	0x200000d4

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 634;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dda:	f240 227a 	movw	r2, #634	; 0x27a
 8000dde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dee:	f002 f82d 	bl	8002e4c <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000df8:	f7ff ff58 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	4619      	mov	r1, r3
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000e0a:	f002 f8c9 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e14:	f7ff ff4a 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000e26:	f002 fa9d 	bl	8003364 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e30:	f7ff ff3c 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000255c 	.word	0x2000255c

08000e40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e50:	d10d      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_TIM_Base_MspInit+0x3c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_TIM_Base_MspInit+0x3c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_TIM_Base_MspInit+0x3c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_USART2_UART_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb8:	f002 fac2 	bl	8003440 <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f7ff fef3 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200025a4 	.word	0x200025a4
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a30      	ldr	r2, [pc, #192]	; (8000fb4 <HAL_UART_MspInit+0xe0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d159      	bne.n	8000faa <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	481c      	ldr	r0, [pc, #112]	; (8000fbc <HAL_UART_MspInit+0xe8>)
 8000f4a:	f001 f949 	bl	80021e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f50:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <HAL_UART_MspInit+0xf0>)
 8000f52:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f90:	f000 fdb6 	bl	8001b00 <HAL_DMA_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000f9a:	f7ff fe87 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	200025e8 	.word	0x200025e8
 8000fc4:	400260a0 	.word	0x400260a0

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fce:	490e      	ldr	r1, [pc, #56]	; (8001008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe4:	4c0b      	ldr	r4, [pc, #44]	; (8001014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff fec7 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f003 fe8b 	bl	8004d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fc3d 	bl	8000878 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800100c:	08018548 	.word	0x08018548
  ldr r2, =_sbss
 8001010:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001014:	2000264c 	.word	0x2000264c

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_Init+0x40>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_Init+0x40>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x40>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 fd19 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fe32 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fd31 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 fcf9 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20002648 	.word	0x20002648

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20002648 	.word	0x20002648

08001100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e033      	b.n	800117e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fa90 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001146:	f023 0302 	bic.w	r3, r3, #2
 800114a:	f043 0202 	orr.w	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 fa44 	bl	80015e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
 800116e:	e001      	b.n	8001174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Start_DMA+0x1e>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e0ce      	b.n	8001344 <HAL_ADC_Start_DMA+0x1bc>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d018      	beq.n	80011ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011cc:	4b5f      	ldr	r3, [pc, #380]	; (800134c <HAL_ADC_Start_DMA+0x1c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a5f      	ldr	r2, [pc, #380]	; (8001350 <HAL_ADC_Start_DMA+0x1c8>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9a      	lsrs	r2, r3, #18
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011e0:	e002      	b.n	80011e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fc:	d107      	bne.n	800120e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800120c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	f040 8086 	bne.w	800132a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001248:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800125c:	d106      	bne.n	800126c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f023 0206 	bic.w	r2, r3, #6
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
 800126a:	e002      	b.n	8001272 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <HAL_ADC_Start_DMA+0x1cc>)
 800127c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <HAL_ADC_Start_DMA+0x1d0>)
 8001284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	4a34      	ldr	r2, [pc, #208]	; (800135c <HAL_ADC_Start_DMA+0x1d4>)
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <HAL_ADC_Start_DMA+0x1d8>)
 8001294:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800129e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80012ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	334c      	adds	r3, #76	; 0x4c
 80012ca:	4619      	mov	r1, r3
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f000 fcc4 	bl	8001c5c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10f      	bne.n	8001300 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d129      	bne.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	e020      	b.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_ADC_Start_DMA+0x1dc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11b      	bne.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d114      	bne.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e00b      	b.n	8001342 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	431bde83 	.word	0x431bde83
 8001354:	40012300 	.word	0x40012300
 8001358:	080017d9 	.word	0x080017d9
 800135c:	08001893 	.word	0x08001893
 8001360:	080018af 	.word	0x080018af
 8001364:	40012000 	.word	0x40012000

08001368 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1c>
 8001394:	2302      	movs	r3, #2
 8001396:	e113      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x244>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	d925      	bls.n	80013f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68d9      	ldr	r1, [r3, #12]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	3b1e      	subs	r3, #30
 80013be:	2207      	movs	r2, #7
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43da      	mvns	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	400a      	ands	r2, r1
 80013cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68d9      	ldr	r1, [r3, #12]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	4603      	mov	r3, r0
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4403      	add	r3, r0
 80013e6:	3b1e      	subs	r3, #30
 80013e8:	409a      	lsls	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	e022      	b.n	800143a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6919      	ldr	r1, [r3, #16]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	2207      	movs	r2, #7
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	400a      	ands	r2, r1
 8001416:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6919      	ldr	r1, [r3, #16]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	4603      	mov	r3, r0
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4403      	add	r3, r0
 8001430:	409a      	lsls	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b06      	cmp	r3, #6
 8001440:	d824      	bhi.n	800148c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b05      	subs	r3, #5
 8001454:	221f      	movs	r2, #31
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	400a      	ands	r2, r1
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	3b05      	subs	r3, #5
 800147e:	fa00 f203 	lsl.w	r2, r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
 800148a:	e04c      	b.n	8001526 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b0c      	cmp	r3, #12
 8001492:	d824      	bhi.n	80014de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b23      	subs	r3, #35	; 0x23
 80014a6:	221f      	movs	r2, #31
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43da      	mvns	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	400a      	ands	r2, r1
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b23      	subs	r3, #35	; 0x23
 80014d0:	fa00 f203 	lsl.w	r2, r0, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	631a      	str	r2, [r3, #48]	; 0x30
 80014dc:	e023      	b.n	8001526 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	3b41      	subs	r3, #65	; 0x41
 80014f0:	221f      	movs	r2, #31
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	400a      	ands	r2, r1
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3b41      	subs	r3, #65	; 0x41
 800151a:	fa00 f203 	lsl.w	r2, r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <HAL_ADC_ConfigChannel+0x250>)
 8001528:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <HAL_ADC_ConfigChannel+0x254>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d10f      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d8>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b12      	cmp	r3, #18
 800153a:	d10b      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_ADC_ConfigChannel+0x254>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x23a>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_ADC_ConfigChannel+0x258>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d003      	beq.n	8001570 <HAL_ADC_ConfigChannel+0x1f4>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b11      	cmp	r3, #17
 800156e:	d122      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <HAL_ADC_ConfigChannel+0x258>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_ADC_ConfigChannel+0x25c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_ADC_ConfigChannel+0x260>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	10000012 	.word	0x10000012
 80015d8:	20000000 	.word	0x20000000
 80015dc:	431bde83 	.word	0x431bde83

080015e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e8:	4b79      	ldr	r3, [pc, #484]	; (80017d0 <ADC_Init+0x1f0>)
 80015ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	431a      	orrs	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	021a      	lsls	r2, r3, #8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6899      	ldr	r1, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	4a58      	ldr	r2, [pc, #352]	; (80017d4 <ADC_Init+0x1f4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d022      	beq.n	80016be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001686:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6899      	ldr	r1, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	e00f      	b.n	80016de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0202 	bic.w	r2, r2, #2
 80016ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6899      	ldr	r1, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7e1b      	ldrb	r3, [r3, #24]
 80016f8:	005a      	lsls	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01b      	beq.n	8001744 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800171a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800172a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6859      	ldr	r1, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	3b01      	subs	r3, #1
 8001738:	035a      	lsls	r2, r3, #13
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	e007      	b.n	8001754 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001752:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	3b01      	subs	r3, #1
 8001770:	051a      	lsls	r2, r3, #20
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6899      	ldr	r1, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6899      	ldr	r1, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	029a      	lsls	r2, r3, #10
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	609a      	str	r2, [r3, #8]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40012300 	.word	0x40012300
 80017d4:	0f000001 	.word	0x0f000001

080017d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d13c      	bne.n	800186c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d12b      	bne.n	8001864 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001810:	2b00      	cmp	r3, #0
 8001812:	d127      	bne.n	8001864 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800182c:	2b00      	cmp	r3, #0
 800182e:	d119      	bne.n	8001864 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0220 	bic.w	r2, r2, #32
 800183e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7ff f8e9 	bl	8000a3c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800186a:	e00e      	b.n	800188a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fd75 	bl	8001368 <HAL_ADC_ErrorCallback>
}
 800187e:	e004      	b.n	800188a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff f8ad 	bl	8000a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f043 0204 	orr.w	r2, r3, #4
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f7ff fd4a 	bl	8001368 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff29 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff3e 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff31 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff faec 	bl	80010e8 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e099      	b.n	8001c50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3c:	e00f      	b.n	8001b5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b3e:	f7ff fad3 	bl	80010e8 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d908      	bls.n	8001b5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2203      	movs	r2, #3
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e078      	b.n	8001c50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e8      	bne.n	8001b3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_DMA_Init+0x158>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d107      	bne.n	8001bc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f023 0307 	bic.w	r3, r3, #7
 8001bde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d117      	bne.n	8001c22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00e      	beq.n	8001c22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fa6f 	bl	80020e8 <DMA_CheckFifoParam>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e016      	b.n	8001c50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fa26 	bl	800207c <DMA_CalcBaseAndBitshift>
 8001c30:	4603      	mov	r3, r0
 8001c32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	223f      	movs	r2, #63	; 0x3f
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	f010803f 	.word	0xf010803f

08001c5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_DMA_Start_IT+0x26>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e040      	b.n	8001d04 <HAL_DMA_Start_IT+0xa8>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d12f      	bne.n	8001cf6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f9b8 	bl	8002020 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	223f      	movs	r2, #63	; 0x3f
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0216 	orr.w	r2, r2, #22
 8001cca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0208 	orr.w	r2, r2, #8
 8001ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e005      	b.n	8001d02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d18:	4b8e      	ldr	r3, [pc, #568]	; (8001f54 <HAL_DMA_IRQHandler+0x248>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a8e      	ldr	r2, [pc, #568]	; (8001f58 <HAL_DMA_IRQHandler+0x24c>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	2208      	movs	r2, #8
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01a      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0204 	bic.w	r2, r2, #4
 8001d5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2208      	movs	r2, #8
 8001d66:	409a      	lsls	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f043 0201 	orr.w	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2204      	movs	r2, #4
 8001db4:	409a      	lsls	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00b      	beq.n	8001de4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f043 0204 	orr.w	r2, r3, #4
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2210      	movs	r2, #16
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d043      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d03c      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	2210      	movs	r2, #16
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d018      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d108      	bne.n	8001e3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d024      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
 8001e3a:	e01f      	b.n	8001e7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
 8001e4c:	e016      	b.n	8001e7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0208 	bic.w	r2, r2, #8
 8001e6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2220      	movs	r2, #32
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 808f 	beq.w	8001fac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 8087 	beq.w	8001fac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d136      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0216 	bic.w	r2, r2, #22
 8001ec4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d103      	bne.n	8001ee6 <HAL_DMA_IRQHandler+0x1da>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0208 	bic.w	r2, r2, #8
 8001ef4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	223f      	movs	r2, #63	; 0x3f
 8001efc:	409a      	lsls	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d07e      	beq.n	8002018 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
        }
        return;
 8001f22:	e079      	b.n	8002018 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01d      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10d      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d031      	beq.n	8001fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	e02c      	b.n	8001fac <HAL_DMA_IRQHandler+0x2a0>
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000
 8001f58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d023      	beq.n	8001fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
 8001f6c:	e01e      	b.n	8001fac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10f      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0210 	bic.w	r2, r2, #16
 8001f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d032      	beq.n	800201a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d022      	beq.n	8002006 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d307      	bcc.n	8001ff4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f2      	bne.n	8001fd8 <HAL_DMA_IRQHandler+0x2cc>
 8001ff2:	e000      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ff4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
 8002016:	e000      	b.n	800201a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002018:	bf00      	nop
    }
  }
}
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800203c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d108      	bne.n	8002060 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800205e:	e007      	b.n	8002070 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	60da      	str	r2, [r3, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3b10      	subs	r3, #16
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <DMA_CalcBaseAndBitshift+0x64>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <DMA_CalcBaseAndBitshift+0x68>)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d909      	bls.n	80020be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020b2:	f023 0303 	bic.w	r3, r3, #3
 80020b6:	1d1a      	adds	r2, r3, #4
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	659a      	str	r2, [r3, #88]	; 0x58
 80020bc:	e007      	b.n	80020ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	aaaaaaab 	.word	0xaaaaaaab
 80020e4:	080050d4 	.word	0x080050d4

080020e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d11f      	bne.n	8002142 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d856      	bhi.n	80021b6 <DMA_CheckFifoParam+0xce>
 8002108:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <DMA_CheckFifoParam+0x28>)
 800210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210e:	bf00      	nop
 8002110:	08002121 	.word	0x08002121
 8002114:	08002133 	.word	0x08002133
 8002118:	08002121 	.word	0x08002121
 800211c:	080021b7 	.word	0x080021b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d046      	beq.n	80021ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002130:	e043      	b.n	80021ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800213a:	d140      	bne.n	80021be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002140:	e03d      	b.n	80021be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800214a:	d121      	bne.n	8002190 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d837      	bhi.n	80021c2 <DMA_CheckFifoParam+0xda>
 8002152:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <DMA_CheckFifoParam+0x70>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	08002169 	.word	0x08002169
 800215c:	0800216f 	.word	0x0800216f
 8002160:	08002169 	.word	0x08002169
 8002164:	08002181 	.word	0x08002181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      break;
 800216c:	e030      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d025      	beq.n	80021c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217e:	e022      	b.n	80021c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002188:	d11f      	bne.n	80021ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800218e:	e01c      	b.n	80021ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d903      	bls.n	800219e <DMA_CheckFifoParam+0xb6>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d003      	beq.n	80021a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800219c:	e018      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
      break;
 80021a2:	e015      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      break;
 80021b4:	e00b      	b.n	80021ce <DMA_CheckFifoParam+0xe6>
      break;
 80021b6:	bf00      	nop
 80021b8:	e00a      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ba:	bf00      	nop
 80021bc:	e008      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
      break;
 80021be:	bf00      	nop
 80021c0:	e006      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
 80021c4:	e004      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e002      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ca:	bf00      	nop
 80021cc:	e000      	b.n	80021d0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
    }
  } 
  
  return status; 
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e159      	b.n	80024b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 8148 	bne.w	80024aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	2b02      	cmp	r3, #2
 8002230:	d130      	bne.n	8002294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b03      	cmp	r3, #3
 800229e:	d017      	beq.n	80022d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a2 	beq.w	80024aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_GPIO_Init+0x2e8>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a56      	ldr	r2, [pc, #344]	; (80024c8 <HAL_GPIO_Init+0x2e8>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b54      	ldr	r3, [pc, #336]	; (80024c8 <HAL_GPIO_Init+0x2e8>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_GPIO_Init+0x2ec>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a49      	ldr	r2, [pc, #292]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d019      	beq.n	80023e2 <HAL_GPIO_Init+0x202>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a48      	ldr	r2, [pc, #288]	; (80024d4 <HAL_GPIO_Init+0x2f4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0x1fe>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a47      	ldr	r2, [pc, #284]	; (80024d8 <HAL_GPIO_Init+0x2f8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00d      	beq.n	80023da <HAL_GPIO_Init+0x1fa>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a46      	ldr	r2, [pc, #280]	; (80024dc <HAL_GPIO_Init+0x2fc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d007      	beq.n	80023d6 <HAL_GPIO_Init+0x1f6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a45      	ldr	r2, [pc, #276]	; (80024e0 <HAL_GPIO_Init+0x300>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_GPIO_Init+0x1f2>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e008      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023d2:	2307      	movs	r3, #7
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023d6:	2303      	movs	r3, #3
 80023d8:	e004      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023da:	2302      	movs	r3, #2
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x204>
 80023e2:	2300      	movs	r3, #0
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f002 0203 	and.w	r2, r2, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	4093      	lsls	r3, r2
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f4:	4935      	ldr	r1, [pc, #212]	; (80024cc <HAL_GPIO_Init+0x2ec>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002426:	4a2f      	ldr	r2, [pc, #188]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_GPIO_Init+0x304>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002450:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247a:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <HAL_GPIO_Init+0x304>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_GPIO_Init+0x304>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a4:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_GPIO_Init+0x304>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	f67f aea2 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40013800 	.word	0x40013800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020c00 	.word	0x40020c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002504:	e003      	b.n	800250e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e267      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d075      	beq.n	8002626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253a:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d00c      	beq.n	8002560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002546:	4b85      	ldr	r3, [pc, #532]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800254e:	2b08      	cmp	r3, #8
 8002550:	d112      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002552:	4b82      	ldr	r3, [pc, #520]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255e:	d10b      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	4b7e      	ldr	r3, [pc, #504]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05b      	beq.n	8002624 <HAL_RCC_OscConfig+0x108>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d157      	bne.n	8002624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e242      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x74>
 8002582:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x98>
 800259a:	4b70      	ldr	r3, [pc, #448]	; (800275c <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6f      	ldr	r2, [pc, #444]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6c      	ldr	r2, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 80025b4:	4b69      	ldr	r3, [pc, #420]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a68      	ldr	r2, [pc, #416]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fd88 	bl	80010e8 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fd84 	bl	80010e8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e207      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b5b      	ldr	r3, [pc, #364]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xc0>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fd74 	bl	80010e8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fd70 	bl	80010e8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1f3      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	4b51      	ldr	r3, [pc, #324]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0xe8>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002646:	2b08      	cmp	r3, #8
 8002648:	d11c      	bne.n	8002684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b44      	ldr	r3, [pc, #272]	; (800275c <HAL_RCC_OscConfig+0x240>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d116      	bne.n	8002684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x152>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e1c7      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4937      	ldr	r1, [pc, #220]	; (800275c <HAL_RCC_OscConfig+0x240>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	e03a      	b.n	80026fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268c:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_RCC_OscConfig+0x244>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fd29 	bl	80010e8 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe fd25 	bl	80010e8 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1a8      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4925      	ldr	r1, [pc, #148]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_OscConfig+0x244>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fd08 	bl	80010e8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe fd04 	bl	80010e8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e187      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d036      	beq.n	8002774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_RCC_OscConfig+0x248>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe fce8 	bl	80010e8 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe fce4 	bl	80010e8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e167      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_OscConfig+0x240>)
 8002730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x200>
 800273a:	e01b      	b.n	8002774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_OscConfig+0x248>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7fe fcd1 	bl	80010e8 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	e00e      	b.n	8002768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fccd 	bl	80010e8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d907      	bls.n	8002768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e150      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	42470000 	.word	0x42470000
 8002764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ea      	bne.n	800274a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8097 	beq.w	80028b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b81      	ldr	r3, [pc, #516]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b7d      	ldr	r3, [pc, #500]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a7c      	ldr	r2, [pc, #496]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b7a      	ldr	r3, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b77      	ldr	r3, [pc, #476]	; (8002990 <HAL_RCC_OscConfig+0x474>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027be:	4b74      	ldr	r3, [pc, #464]	; (8002990 <HAL_RCC_OscConfig+0x474>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a73      	ldr	r2, [pc, #460]	; (8002990 <HAL_RCC_OscConfig+0x474>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fc8d 	bl	80010e8 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fe fc89 	bl	80010e8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e10c      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <HAL_RCC_OscConfig+0x474>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x2ea>
 80027f8:	4b64      	ldr	r3, [pc, #400]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a63      	ldr	r2, [pc, #396]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	e01c      	b.n	8002840 <HAL_RCC_OscConfig+0x324>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b05      	cmp	r3, #5
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x30c>
 800280e:	4b5f      	ldr	r3, [pc, #380]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a5e      	ldr	r2, [pc, #376]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
 800281a:	4b5c      	ldr	r3, [pc, #368]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	4a5b      	ldr	r2, [pc, #364]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	; 0x70
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x324>
 8002828:	4b58      	ldr	r3, [pc, #352]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a57      	ldr	r2, [pc, #348]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	4b55      	ldr	r3, [pc, #340]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a54      	ldr	r2, [pc, #336]	; (800298c <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 0304 	bic.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fc4e 	bl	80010e8 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	e00a      	b.n	8002866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7fe fc4a 	bl	80010e8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0cb      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ee      	beq.n	8002850 <HAL_RCC_OscConfig+0x334>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe fc38 	bl	80010e8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe fc34 	bl	80010e8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0b5      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002892:	4b3e      	ldr	r3, [pc, #248]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ee      	bne.n	800287c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	4a38      	ldr	r2, [pc, #224]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a1 	beq.w	80029fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d05c      	beq.n	8002980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d141      	bne.n	8002952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_OscConfig+0x478>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fc08 	bl	80010e8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fc04 	bl	80010e8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e087      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x470>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	491b      	ldr	r1, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x478>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fbdd 	bl	80010e8 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe fbd9 	bl	80010e8 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e05c      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x416>
 8002950:	e054      	b.n	80029fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_RCC_OscConfig+0x478>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe fbc6 	bl	80010e8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fbc2 	bl	80010e8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e045      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_OscConfig+0x470>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x444>
 800297e:	e03d      	b.n	80029fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e038      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000
 8002994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x4ec>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d028      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d121      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d11a      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c8:	4013      	ands	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	3b01      	subs	r3, #1
 80029e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0cc      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d90c      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b8      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a60:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a84:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	494d      	ldr	r1, [pc, #308]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d044      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d119      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e07f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e067      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4934      	ldr	r1, [pc, #208]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fe faf4 	bl	80010e8 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe faf0 	bl	80010e8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e04f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d20c      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e032      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4916      	ldr	r1, [pc, #88]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b92:	f000 f821 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	490a      	ldr	r1, [pc, #40]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fa54 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023c00 	.word	0x40023c00
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	080050bc 	.word	0x080050bc
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b094      	sub	sp, #80	; 0x50
 8002bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	647b      	str	r3, [r7, #68]	; 0x44
 8002be4:	2300      	movs	r3, #0
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	2300      	movs	r3, #0
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf0:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d00d      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	f200 80e1 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x34>
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0a:	e0db      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c10:	e0db      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c12:	4b73      	ldr	r3, [pc, #460]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c16:	e0d8      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d063      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
 8002c42:	2300      	movs	r3, #0
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
 8002c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	0159      	lsls	r1, r3, #5
 8002c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5c:	0150      	lsls	r0, r2, #5
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4621      	mov	r1, r4
 8002c64:	1a51      	subs	r1, r2, r1
 8002c66:	6139      	str	r1, [r7, #16]
 8002c68:	4629      	mov	r1, r5
 8002c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	018b      	lsls	r3, r1, #6
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c86:	4651      	mov	r1, sl
 8002c88:	018a      	lsls	r2, r1, #6
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c90:	4659      	mov	r1, fp
 8002c92:	eb63 0901 	sbc.w	r9, r3, r1
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002caa:	4690      	mov	r8, r2
 8002cac:	4699      	mov	r9, r3
 8002cae:	4623      	mov	r3, r4
 8002cb0:	eb18 0303 	adds.w	r3, r8, r3
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	eb49 0303 	adc.w	r3, r9, r3
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cca:	4629      	mov	r1, r5
 8002ccc:	024b      	lsls	r3, r1, #9
 8002cce:	4621      	mov	r1, r4
 8002cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	024a      	lsls	r2, r1, #9
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ce8:	f7fd fad6 	bl	8000298 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf4:	e058      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4611      	mov	r1, r2
 8002d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d10:	4642      	mov	r2, r8
 8002d12:	464b      	mov	r3, r9
 8002d14:	f04f 0000 	mov.w	r0, #0
 8002d18:	f04f 0100 	mov.w	r1, #0
 8002d1c:	0159      	lsls	r1, r3, #5
 8002d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d22:	0150      	lsls	r0, r2, #5
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4641      	mov	r1, r8
 8002d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d2e:	4649      	mov	r1, r9
 8002d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d48:	ebb2 040a 	subs.w	r4, r2, sl
 8002d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	00eb      	lsls	r3, r5, #3
 8002d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d5e:	00e2      	lsls	r2, r4, #3
 8002d60:	4614      	mov	r4, r2
 8002d62:	461d      	mov	r5, r3
 8002d64:	4643      	mov	r3, r8
 8002d66:	18e3      	adds	r3, r4, r3
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	eb45 0303 	adc.w	r3, r5, r3
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	028b      	lsls	r3, r1, #10
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d88:	4621      	mov	r1, r4
 8002d8a:	028a      	lsls	r2, r1, #10
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d92:	2200      	movs	r2, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	61fa      	str	r2, [r7, #28]
 8002d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d9c:	f7fd fa7c 	bl	8000298 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3750      	adds	r7, #80	; 0x50
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00f42400 	.word	0x00f42400
 8002de0:	007a1200 	.word	0x007a1200

08002de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000000 	.word	0x20000000

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0a9b      	lsrs	r3, r3, #10
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	080050cc 	.word	0x080050cc

08002e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e28:	f7ff ffdc 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0b5b      	lsrs	r3, r3, #13
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	080050cc 	.word	0x080050cc

08002e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e041      	b.n	8002ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd ffe4 	bl	8000e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 f950 	bl	8003130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d001      	beq.n	8002f04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e03c      	b.n	8002f7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <HAL_TIM_Base_Start+0xa0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d018      	beq.n	8002f48 <HAL_TIM_Base_Start+0x5c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1e:	d013      	beq.n	8002f48 <HAL_TIM_Base_Start+0x5c>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_TIM_Base_Start+0xa4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <HAL_TIM_Base_Start+0x5c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_TIM_Base_Start+0xa8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_TIM_Base_Start+0x5c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <HAL_TIM_Base_Start+0xac>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIM_Base_Start+0x5c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <HAL_TIM_Base_Start+0xb0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d111      	bne.n	8002f6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d010      	beq.n	8002f7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6a:	e007      	b.n	8002f7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40014000 	.word	0x40014000

08002fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_ConfigClockSource+0x1c>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0b4      	b.n	8003126 <HAL_TIM_ConfigClockSource+0x186>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff4:	d03e      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0xd4>
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffa:	f200 8087 	bhi.w	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	f000 8086 	beq.w	8003112 <HAL_TIM_ConfigClockSource+0x172>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d87f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d01a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xa6>
 8003010:	2b70      	cmp	r3, #112	; 0x70
 8003012:	d87b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d050      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x11a>
 8003018:	2b60      	cmp	r3, #96	; 0x60
 800301a:	d877      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d03c      	beq.n	800309a <HAL_TIM_ConfigClockSource+0xfa>
 8003020:	2b50      	cmp	r3, #80	; 0x50
 8003022:	d873      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d058      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x13a>
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d86f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d064      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d86b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d060      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d867      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05c      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d05a      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	e062      	b.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f000 f965 	bl	8003324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]
      break;
 8003072:	e04f      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f000 f94e 	bl	8003324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003096:	609a      	str	r2, [r3, #8]
      break;
 8003098:	e03c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f000 f8c2 	bl	8003230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2150      	movs	r1, #80	; 0x50
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f91b 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 80030b8:	e02c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 f8e1 	bl	800328e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2160      	movs	r1, #96	; 0x60
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f90b 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 80030d8:	e01c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 f8a2 	bl	8003230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2140      	movs	r1, #64	; 0x40
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f8fb 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 80030f8:	e00c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 f8f2 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 800310a:	e003      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e000      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a34      	ldr	r2, [pc, #208]	; (8003214 <TIM_Base_SetConfig+0xe4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00f      	beq.n	8003168 <TIM_Base_SetConfig+0x38>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d00b      	beq.n	8003168 <TIM_Base_SetConfig+0x38>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a31      	ldr	r2, [pc, #196]	; (8003218 <TIM_Base_SetConfig+0xe8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <TIM_Base_SetConfig+0x38>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a30      	ldr	r2, [pc, #192]	; (800321c <TIM_Base_SetConfig+0xec>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0x38>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a2f      	ldr	r2, [pc, #188]	; (8003220 <TIM_Base_SetConfig+0xf0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a25      	ldr	r2, [pc, #148]	; (8003214 <TIM_Base_SetConfig+0xe4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01b      	beq.n	80031ba <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d017      	beq.n	80031ba <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <TIM_Base_SetConfig+0xe8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <TIM_Base_SetConfig+0xec>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00f      	beq.n	80031ba <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <TIM_Base_SetConfig+0xf0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00b      	beq.n	80031ba <TIM_Base_SetConfig+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <TIM_Base_SetConfig+0xf4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <TIM_Base_SetConfig+0x8a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <TIM_Base_SetConfig+0xf8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_Base_SetConfig+0x8a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1d      	ldr	r2, [pc, #116]	; (800322c <TIM_Base_SetConfig+0xfc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d108      	bne.n	80031cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a08      	ldr	r2, [pc, #32]	; (8003214 <TIM_Base_SetConfig+0xe4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d103      	bne.n	8003200 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	615a      	str	r2, [r3, #20]
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40010000 	.word	0x40010000
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800
 8003220:	40000c00 	.word	0x40000c00
 8003224:	40014000 	.word	0x40014000
 8003228:	40014400 	.word	0x40014400
 800322c:	40014800 	.word	0x40014800

08003230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0201 	bic.w	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800325a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 030a 	bic.w	r3, r3, #10
 800326c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800328e:	b480      	push	{r7}
 8003290:	b087      	sub	sp, #28
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0210 	bic.w	r2, r3, #16
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	031b      	lsls	r3, r3, #12
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	f043 0307 	orr.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	431a      	orrs	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003378:	2302      	movs	r3, #2
 800337a:	e050      	b.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d018      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d013      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a16      	ldr	r2, [pc, #88]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a13      	ldr	r2, [pc, #76]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10c      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4313      	orrs	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40010000 	.word	0x40010000
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40014000 	.word	0x40014000

08003440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e03f      	b.n	80034d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fd34 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f9f5 	bl	8003874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08c      	sub	sp, #48	; 0x30
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d165      	bne.n	80035c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_UART_Transmit_DMA+0x26>
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e05e      	b.n	80035c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_UART_Transmit_DMA+0x38>
 8003510:	2302      	movs	r3, #2
 8003512:	e057      	b.n	80035c4 <HAL_UART_Transmit_DMA+0xe8>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2221      	movs	r2, #33	; 0x21
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	4a22      	ldr	r2, [pc, #136]	; (80035cc <HAL_UART_Transmit_DMA+0xf0>)
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <HAL_UART_Transmit_DMA+0xf4>)
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <HAL_UART_Transmit_DMA+0xf8>)
 8003552:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	2200      	movs	r2, #0
 800355a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800355c:	f107 0308 	add.w	r3, r7, #8
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3304      	adds	r3, #4
 8003570:	461a      	mov	r2, r3
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	f7fe fb72 	bl	8001c5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003580:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	617b      	str	r3, [r7, #20]
   return(result);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035aa:	627a      	str	r2, [r7, #36]	; 0x24
 80035ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6a39      	ldr	r1, [r7, #32]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3730      	adds	r7, #48	; 0x30
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	08003615 	.word	0x08003615
 80035d0:	080036af 	.word	0x080036af
 80035d4:	080036cb 	.word	0x080036cb

080035d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b090      	sub	sp, #64	; 0x40
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d137      	bne.n	80036a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003632:	2200      	movs	r2, #0
 8003634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3314      	adds	r3, #20
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	623b      	str	r3, [r7, #32]
   return(result);
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
 800364e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3314      	adds	r3, #20
 8003654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003656:	633a      	str	r2, [r7, #48]	; 0x30
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800365c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e5      	bne.n	8003636 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	60fb      	str	r3, [r7, #12]
   return(result);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800368a:	61fa      	str	r2, [r7, #28]
 800368c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	69b9      	ldr	r1, [r7, #24]
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	617b      	str	r3, [r7, #20]
   return(result);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800369e:	e002      	b.n	80036a6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80036a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036a2:	f7ff ff99 	bl	80035d8 <HAL_UART_TxCpltCallback>
}
 80036a6:	bf00      	nop
 80036a8:	3740      	adds	r7, #64	; 0x40
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff ff95 	bl	80035ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b21      	cmp	r3, #33	; 0x21
 80036fc:	d108      	bne.n	8003710 <UART_DMAError+0x46>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2200      	movs	r2, #0
 8003708:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f000 f827 	bl	800375e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b22      	cmp	r3, #34	; 0x22
 8003730:	d108      	bne.n	8003744 <UART_DMAError+0x7a>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2200      	movs	r2, #0
 800373c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800373e:	68b8      	ldr	r0, [r7, #8]
 8003740:	f000 f835 	bl	80037ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f043 0210 	orr.w	r2, r3, #16
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003750:	68b8      	ldr	r0, [r7, #8]
 8003752:	f7ff ff55 	bl	8003600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800375e:	b480      	push	{r7}
 8003760:	b089      	sub	sp, #36	; 0x24
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	60bb      	str	r3, [r7, #8]
   return(result);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	61ba      	str	r2, [r7, #24]
 8003788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	6979      	ldr	r1, [r7, #20]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	613b      	str	r3, [r7, #16]
   return(result);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e5      	bne.n	8003766 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80037a2:	bf00      	nop
 80037a4:	3724      	adds	r7, #36	; 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b095      	sub	sp, #84	; 0x54
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	330c      	adds	r3, #12
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d6:	643a      	str	r2, [r7, #64]	; 0x40
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3314      	adds	r3, #20
 80037f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	64bb      	str	r3, [r7, #72]	; 0x48
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3314      	adds	r3, #20
 8003808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800380a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e5      	bne.n	80037ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	2b01      	cmp	r3, #1
 8003824:	d119      	bne.n	800385a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	60bb      	str	r3, [r7, #8]
   return(result);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	647b      	str	r3, [r7, #68]	; 0x44
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003846:	61ba      	str	r2, [r7, #24]
 8003848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	613b      	str	r3, [r7, #16]
   return(result);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003868:	bf00      	nop
 800386a:	3754      	adds	r7, #84	; 0x54
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003878:	b0c0      	sub	sp, #256	; 0x100
 800387a:	af00      	add	r7, sp, #0
 800387c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	68d9      	ldr	r1, [r3, #12]
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	ea40 0301 	orr.w	r3, r0, r1
 800389c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038cc:	f021 010c 	bic.w	r1, r1, #12
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038da:	430b      	orrs	r3, r1
 80038dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	6999      	ldr	r1, [r3, #24]
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	ea40 0301 	orr.w	r3, r0, r1
 80038fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b8f      	ldr	r3, [pc, #572]	; (8003b40 <UART_SetConfig+0x2cc>)
 8003904:	429a      	cmp	r2, r3
 8003906:	d005      	beq.n	8003914 <UART_SetConfig+0xa0>
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4b8d      	ldr	r3, [pc, #564]	; (8003b44 <UART_SetConfig+0x2d0>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d104      	bne.n	800391e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003914:	f7ff fa86 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 8003918:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800391c:	e003      	b.n	8003926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800391e:	f7ff fa6d 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8003922:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003930:	f040 810c 	bne.w	8003b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003938:	2200      	movs	r2, #0
 800393a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800393e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003946:	4622      	mov	r2, r4
 8003948:	462b      	mov	r3, r5
 800394a:	1891      	adds	r1, r2, r2
 800394c:	65b9      	str	r1, [r7, #88]	; 0x58
 800394e:	415b      	adcs	r3, r3
 8003950:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003956:	4621      	mov	r1, r4
 8003958:	eb12 0801 	adds.w	r8, r2, r1
 800395c:	4629      	mov	r1, r5
 800395e:	eb43 0901 	adc.w	r9, r3, r1
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800396e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003976:	4690      	mov	r8, r2
 8003978:	4699      	mov	r9, r3
 800397a:	4623      	mov	r3, r4
 800397c:	eb18 0303 	adds.w	r3, r8, r3
 8003980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003984:	462b      	mov	r3, r5
 8003986:	eb49 0303 	adc.w	r3, r9, r3
 800398a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800399a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800399e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039a2:	460b      	mov	r3, r1
 80039a4:	18db      	adds	r3, r3, r3
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50
 80039a8:	4613      	mov	r3, r2
 80039aa:	eb42 0303 	adc.w	r3, r2, r3
 80039ae:	657b      	str	r3, [r7, #84]	; 0x54
 80039b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039b8:	f7fc fc6e 	bl	8000298 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <UART_SetConfig+0x2d4>)
 80039c2:	fba3 2302 	umull	r2, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	011c      	lsls	r4, r3, #4
 80039ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	1891      	adds	r1, r2, r2
 80039e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80039e4:	415b      	adcs	r3, r3
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039ec:	4641      	mov	r1, r8
 80039ee:	eb12 0a01 	adds.w	sl, r2, r1
 80039f2:	4649      	mov	r1, r9
 80039f4:	eb43 0b01 	adc.w	fp, r3, r1
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a0c:	4692      	mov	sl, r2
 8003a0e:	469b      	mov	fp, r3
 8003a10:	4643      	mov	r3, r8
 8003a12:	eb1a 0303 	adds.w	r3, sl, r3
 8003a16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	18db      	adds	r3, r3, r3
 8003a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a3e:	4613      	mov	r3, r2
 8003a40:	eb42 0303 	adc.w	r3, r2, r3
 8003a44:	647b      	str	r3, [r7, #68]	; 0x44
 8003a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a4e:	f7fc fc23 	bl	8000298 <__aeabi_uldivmod>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4611      	mov	r1, r2
 8003a58:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <UART_SetConfig+0x2d4>)
 8003a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2264      	movs	r2, #100	; 0x64
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	1acb      	subs	r3, r1, r3
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a6e:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <UART_SetConfig+0x2d4>)
 8003a70:	fba3 2302 	umull	r2, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a7c:	441c      	add	r4, r3
 8003a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	1891      	adds	r1, r2, r2
 8003a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a98:	415b      	adcs	r3, r3
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	1851      	adds	r1, r2, r1
 8003aa4:	6339      	str	r1, [r7, #48]	; 0x30
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	414b      	adcs	r3, r1
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ab8:	4659      	mov	r1, fp
 8003aba:	00cb      	lsls	r3, r1, #3
 8003abc:	4651      	mov	r1, sl
 8003abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	00ca      	lsls	r2, r1, #3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	4642      	mov	r2, r8
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	eb42 0303 	adc.w	r3, r2, r3
 8003adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003aec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003af4:	460b      	mov	r3, r1
 8003af6:	18db      	adds	r3, r3, r3
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afa:	4613      	mov	r3, r2
 8003afc:	eb42 0303 	adc.w	r3, r2, r3
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b0a:	f7fc fbc5 	bl	8000298 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <UART_SetConfig+0x2d4>)
 8003b14:	fba3 1302 	umull	r1, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	2164      	movs	r1, #100	; 0x64
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	3332      	adds	r3, #50	; 0x32
 8003b26:	4a08      	ldr	r2, [pc, #32]	; (8003b48 <UART_SetConfig+0x2d4>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	f003 0207 	and.w	r2, r3, #7
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4422      	add	r2, r4
 8003b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b3c:	e105      	b.n	8003d4a <UART_SetConfig+0x4d6>
 8003b3e:	bf00      	nop
 8003b40:	40011000 	.word	0x40011000
 8003b44:	40011400 	.word	0x40011400
 8003b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b50:	2200      	movs	r2, #0
 8003b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b5e:	4642      	mov	r2, r8
 8003b60:	464b      	mov	r3, r9
 8003b62:	1891      	adds	r1, r2, r2
 8003b64:	6239      	str	r1, [r7, #32]
 8003b66:	415b      	adcs	r3, r3
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b6e:	4641      	mov	r1, r8
 8003b70:	1854      	adds	r4, r2, r1
 8003b72:	4649      	mov	r1, r9
 8003b74:	eb43 0501 	adc.w	r5, r3, r1
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	00eb      	lsls	r3, r5, #3
 8003b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b86:	00e2      	lsls	r2, r4, #3
 8003b88:	4614      	mov	r4, r2
 8003b8a:	461d      	mov	r5, r3
 8003b8c:	4643      	mov	r3, r8
 8003b8e:	18e3      	adds	r3, r4, r3
 8003b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b94:	464b      	mov	r3, r9
 8003b96:	eb45 0303 	adc.w	r3, r5, r3
 8003b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003baa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bba:	4629      	mov	r1, r5
 8003bbc:	008b      	lsls	r3, r1, #2
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	008a      	lsls	r2, r1, #2
 8003bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bcc:	f7fc fb64 	bl	8000298 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4b60      	ldr	r3, [pc, #384]	; (8003d58 <UART_SetConfig+0x4e4>)
 8003bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	011c      	lsls	r4, r3, #4
 8003bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003be8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	1891      	adds	r1, r2, r2
 8003bf6:	61b9      	str	r1, [r7, #24]
 8003bf8:	415b      	adcs	r3, r3
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c00:	4641      	mov	r1, r8
 8003c02:	1851      	adds	r1, r2, r1
 8003c04:	6139      	str	r1, [r7, #16]
 8003c06:	4649      	mov	r1, r9
 8003c08:	414b      	adcs	r3, r1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c18:	4659      	mov	r1, fp
 8003c1a:	00cb      	lsls	r3, r1, #3
 8003c1c:	4651      	mov	r1, sl
 8003c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c22:	4651      	mov	r1, sl
 8003c24:	00ca      	lsls	r2, r1, #3
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c34:	464b      	mov	r3, r9
 8003c36:	460a      	mov	r2, r1
 8003c38:	eb42 0303 	adc.w	r3, r2, r3
 8003c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c58:	4649      	mov	r1, r9
 8003c5a:	008b      	lsls	r3, r1, #2
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c62:	4641      	mov	r1, r8
 8003c64:	008a      	lsls	r2, r1, #2
 8003c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c6a:	f7fc fb15 	bl	8000298 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <UART_SetConfig+0x4e4>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	3332      	adds	r3, #50	; 0x32
 8003c86:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <UART_SetConfig+0x4e4>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c92:	441c      	add	r4, r3
 8003c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c98:	2200      	movs	r2, #0
 8003c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c9c:	677a      	str	r2, [r7, #116]	; 0x74
 8003c9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	1891      	adds	r1, r2, r2
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	415b      	adcs	r3, r3
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	1851      	adds	r1, r2, r1
 8003cb6:	6039      	str	r1, [r7, #0]
 8003cb8:	4649      	mov	r1, r9
 8003cba:	414b      	adcs	r3, r1
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cca:	4659      	mov	r1, fp
 8003ccc:	00cb      	lsls	r3, r1, #3
 8003cce:	4651      	mov	r1, sl
 8003cd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd4:	4651      	mov	r1, sl
 8003cd6:	00ca      	lsls	r2, r1, #3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4642      	mov	r2, r8
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	460a      	mov	r2, r1
 8003ce8:	eb42 0303 	adc.w	r3, r2, r3
 8003cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf8:	667a      	str	r2, [r7, #100]	; 0x64
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d06:	4649      	mov	r1, r9
 8003d08:	008b      	lsls	r3, r1, #2
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d10:	4641      	mov	r1, r8
 8003d12:	008a      	lsls	r2, r1, #2
 8003d14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d18:	f7fc fabe 	bl	8000298 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <UART_SetConfig+0x4e4>)
 8003d22:	fba3 1302 	umull	r1, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2164      	movs	r1, #100	; 0x64
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	3332      	adds	r3, #50	; 0x32
 8003d34:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <UART_SetConfig+0x4e4>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 020f 	and.w	r2, r3, #15
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4422      	add	r2, r4
 8003d48:	609a      	str	r2, [r3, #8]
}
 8003d4a:	bf00      	nop
 8003d4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d56:	bf00      	nop
 8003d58:	51eb851f 	.word	0x51eb851f

08003d5c <arm_rfft_fast_init_f32>:
 8003d5c:	084b      	lsrs	r3, r1, #1
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	b410      	push	{r4}
 8003d62:	8201      	strh	r1, [r0, #16]
 8003d64:	8003      	strh	r3, [r0, #0]
 8003d66:	d047      	beq.n	8003df8 <arm_rfft_fast_init_f32+0x9c>
 8003d68:	d917      	bls.n	8003d9a <arm_rfft_fast_init_f32+0x3e>
 8003d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6e:	d03d      	beq.n	8003dec <arm_rfft_fast_init_f32+0x90>
 8003d70:	d929      	bls.n	8003dc6 <arm_rfft_fast_init_f32+0x6a>
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d76:	d020      	beq.n	8003dba <arm_rfft_fast_init_f32+0x5e>
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7c:	d113      	bne.n	8003da6 <arm_rfft_fast_init_f32+0x4a>
 8003d7e:	4921      	ldr	r1, [pc, #132]	; (8003e04 <arm_rfft_fast_init_f32+0xa8>)
 8003d80:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <arm_rfft_fast_init_f32+0xac>)
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <arm_rfft_fast_init_f32+0xb0>)
 8003d84:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8003d88:	8184      	strh	r4, [r0, #12]
 8003d8a:	6081      	str	r1, [r0, #8]
 8003d8c:	6042      	str	r2, [r0, #4]
 8003d8e:	6143      	str	r3, [r0, #20]
 8003d90:	2000      	movs	r0, #0
 8003d92:	b240      	sxtb	r0, r0
 8003d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d01c      	beq.n	8003dd8 <arm_rfft_fast_init_f32+0x7c>
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d006      	beq.n	8003db0 <arm_rfft_fast_init_f32+0x54>
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d01d      	beq.n	8003de2 <arm_rfft_fast_init_f32+0x86>
 8003da6:	20ff      	movs	r0, #255	; 0xff
 8003da8:	b240      	sxtb	r0, r0
 8003daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	2438      	movs	r4, #56	; 0x38
 8003db2:	4917      	ldr	r1, [pc, #92]	; (8003e10 <arm_rfft_fast_init_f32+0xb4>)
 8003db4:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <arm_rfft_fast_init_f32+0xb8>)
 8003db6:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <arm_rfft_fast_init_f32+0xbc>)
 8003db8:	e7e6      	b.n	8003d88 <arm_rfft_fast_init_f32+0x2c>
 8003dba:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8003dbe:	4917      	ldr	r1, [pc, #92]	; (8003e1c <arm_rfft_fast_init_f32+0xc0>)
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <arm_rfft_fast_init_f32+0xc4>)
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <arm_rfft_fast_init_f32+0xc8>)
 8003dc4:	e7e0      	b.n	8003d88 <arm_rfft_fast_init_f32+0x2c>
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dca:	d1ec      	bne.n	8003da6 <arm_rfft_fast_init_f32+0x4a>
 8003dcc:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8003dd0:	4915      	ldr	r1, [pc, #84]	; (8003e28 <arm_rfft_fast_init_f32+0xcc>)
 8003dd2:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <arm_rfft_fast_init_f32+0xd0>)
 8003dd4:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <arm_rfft_fast_init_f32+0xd4>)
 8003dd6:	e7d7      	b.n	8003d88 <arm_rfft_fast_init_f32+0x2c>
 8003dd8:	2430      	movs	r4, #48	; 0x30
 8003dda:	4916      	ldr	r1, [pc, #88]	; (8003e34 <arm_rfft_fast_init_f32+0xd8>)
 8003ddc:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <arm_rfft_fast_init_f32+0xdc>)
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <arm_rfft_fast_init_f32+0xe0>)
 8003de0:	e7d2      	b.n	8003d88 <arm_rfft_fast_init_f32+0x2c>
 8003de2:	2414      	movs	r4, #20
 8003de4:	4916      	ldr	r1, [pc, #88]	; (8003e40 <arm_rfft_fast_init_f32+0xe4>)
 8003de6:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <arm_rfft_fast_init_f32+0xe8>)
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <arm_rfft_fast_init_f32+0xec>)
 8003dea:	e7cd      	b.n	8003d88 <arm_rfft_fast_init_f32+0x2c>
 8003dec:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003df0:	4916      	ldr	r1, [pc, #88]	; (8003e4c <arm_rfft_fast_init_f32+0xf0>)
 8003df2:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <arm_rfft_fast_init_f32+0xf4>)
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <arm_rfft_fast_init_f32+0xf8>)
 8003df6:	e7c7      	b.n	8003d88 <arm_rfft_fast_init_f32+0x2c>
 8003df8:	24d0      	movs	r4, #208	; 0xd0
 8003dfa:	4917      	ldr	r1, [pc, #92]	; (8003e58 <arm_rfft_fast_init_f32+0xfc>)
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <arm_rfft_fast_init_f32+0x100>)
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <arm_rfft_fast_init_f32+0x104>)
 8003e00:	e7c2      	b.n	8003d88 <arm_rfft_fast_init_f32+0x2c>
 8003e02:	bf00      	nop
 8003e04:	08013ee4 	.word	0x08013ee4
 8003e08:	080050dc 	.word	0x080050dc
 8003e0c:	0800b24c 	.word	0x0800b24c
 8003e10:	080091dc 	.word	0x080091dc
 8003e14:	08015ca4 	.word	0x08015ca4
 8003e18:	08018194 	.word	0x08018194
 8003e1c:	08011bcc 	.word	0x08011bcc
 8003e20:	0800facc 	.word	0x0800facc
 8003e24:	0800924c 	.word	0x0800924c
 8003e28:	08017e24 	.word	0x08017e24
 8003e2c:	0800f24c 	.word	0x0800f24c
 8003e30:	08015ea4 	.word	0x08015ea4
 8003e34:	08012a84 	.word	0x08012a84
 8003e38:	08011acc 	.word	0x08011acc
 8003e3c:	080090dc 	.word	0x080090dc
 8003e40:	080129dc 	.word	0x080129dc
 8003e44:	0800fa4c 	.word	0x0800fa4c
 8003e48:	08012a04 	.word	0x08012a04
 8003e4c:	080166a4 	.word	0x080166a4
 8003e50:	08012ee4 	.word	0x08012ee4
 8003e54:	08016a24 	.word	0x08016a24
 8003e58:	08018394 	.word	0x08018394
 8003e5c:	08012ae4 	.word	0x08012ae4
 8003e60:	08017a24 	.word	0x08017a24

08003e64 <arm_rfft_fast_f32>:
 8003e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e68:	8a06      	ldrh	r6, [r0, #16]
 8003e6a:	0876      	lsrs	r6, r6, #1
 8003e6c:	4607      	mov	r7, r0
 8003e6e:	4615      	mov	r5, r2
 8003e70:	8006      	strh	r6, [r0, #0]
 8003e72:	460c      	mov	r4, r1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d15c      	bne.n	8003f32 <arm_rfft_fast_f32+0xce>
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f000 fbe6 	bl	800464c <arm_cfft_f32>
 8003e80:	edd4 7a00 	vldr	s15, [r4]
 8003e84:	ed94 7a01 	vldr	s14, [r4, #4]
 8003e88:	883e      	ldrh	r6, [r7, #0]
 8003e8a:	6978      	ldr	r0, [r7, #20]
 8003e8c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003e90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e94:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8003e98:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ea0:	3e01      	subs	r6, #1
 8003ea2:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8003ea6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003eaa:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8003eae:	ed85 7a00 	vstr	s14, [r5]
 8003eb2:	edc5 7a01 	vstr	s15, [r5, #4]
 8003eb6:	3010      	adds	r0, #16
 8003eb8:	f105 0210 	add.w	r2, r5, #16
 8003ebc:	3b08      	subs	r3, #8
 8003ebe:	f104 0110 	add.w	r1, r4, #16
 8003ec2:	ed51 4a02 	vldr	s9, [r1, #-8]
 8003ec6:	ed93 5a02 	vldr	s10, [r3, #8]
 8003eca:	ed11 7a01 	vldr	s14, [r1, #-4]
 8003ece:	ed10 6a02 	vldr	s12, [r0, #-8]
 8003ed2:	edd3 5a03 	vldr	s11, [r3, #12]
 8003ed6:	ed50 6a01 	vldr	s13, [r0, #-4]
 8003eda:	ee75 7a64 	vsub.f32	s15, s10, s9
 8003ede:	ee35 4a87 	vadd.f32	s8, s11, s14
 8003ee2:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003ee6:	ee77 5a65 	vsub.f32	s11, s14, s11
 8003eea:	ee66 4a27 	vmul.f32	s9, s12, s15
 8003eee:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003ef2:	ee34 5a85 	vadd.f32	s10, s9, s10
 8003ef6:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003efa:	ee66 6a84 	vmul.f32	s13, s13, s8
 8003efe:	ee77 7a25 	vadd.f32	s15, s14, s11
 8003f02:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003f06:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003f0a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003f0e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003f12:	3e01      	subs	r6, #1
 8003f14:	ed42 6a02 	vstr	s13, [r2, #-8]
 8003f18:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003f1c:	f1a3 0308 	sub.w	r3, r3, #8
 8003f20:	f101 0108 	add.w	r1, r1, #8
 8003f24:	f100 0008 	add.w	r0, r0, #8
 8003f28:	f102 0208 	add.w	r2, r2, #8
 8003f2c:	d1c9      	bne.n	8003ec2 <arm_rfft_fast_f32+0x5e>
 8003f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f32:	edd1 7a00 	vldr	s15, [r1]
 8003f36:	edd1 6a01 	vldr	s13, [r1, #4]
 8003f3a:	6941      	ldr	r1, [r0, #20]
 8003f3c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003f40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f44:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8003f48:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003f4c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003f50:	3e01      	subs	r6, #1
 8003f52:	ed82 7a00 	vstr	s14, [r2]
 8003f56:	edc2 7a01 	vstr	s15, [r2, #4]
 8003f5a:	00f0      	lsls	r0, r6, #3
 8003f5c:	b3ee      	cbz	r6, 8003fda <arm_rfft_fast_f32+0x176>
 8003f5e:	3808      	subs	r0, #8
 8003f60:	f101 0e10 	add.w	lr, r1, #16
 8003f64:	4420      	add	r0, r4
 8003f66:	f104 0110 	add.w	r1, r4, #16
 8003f6a:	f102 0c10 	add.w	ip, r2, #16
 8003f6e:	ed90 7a02 	vldr	s14, [r0, #8]
 8003f72:	ed51 6a02 	vldr	s13, [r1, #-8]
 8003f76:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8003f7a:	ed90 4a03 	vldr	s8, [r0, #12]
 8003f7e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8003f82:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8003f86:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8003f8a:	ee74 4a05 	vadd.f32	s9, s8, s10
 8003f8e:	ee26 3a27 	vmul.f32	s6, s12, s15
 8003f92:	ee77 6a26 	vadd.f32	s13, s14, s13
 8003f96:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003f9a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8003f9e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003fa2:	ee77 7a05 	vadd.f32	s15, s14, s10
 8003fa6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003faa:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8003fae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003fb2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8003fb6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003fba:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003fbe:	3e01      	subs	r6, #1
 8003fc0:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8003fc4:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8003fc8:	f1a0 0008 	sub.w	r0, r0, #8
 8003fcc:	f101 0108 	add.w	r1, r1, #8
 8003fd0:	f10e 0e08 	add.w	lr, lr, #8
 8003fd4:	f10c 0c08 	add.w	ip, ip, #8
 8003fd8:	d1c9      	bne.n	8003f6e <arm_rfft_fast_f32+0x10a>
 8003fda:	4638      	mov	r0, r7
 8003fdc:	4629      	mov	r1, r5
 8003fde:	461a      	mov	r2, r3
 8003fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f000 bb31 	b.w	800464c <arm_cfft_f32>
 8003fea:	bf00      	nop

08003fec <arm_cfft_radix8by2_f32>:
 8003fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff0:	ed2d 8b08 	vpush	{d8-d11}
 8003ff4:	f8b0 e000 	ldrh.w	lr, [r0]
 8003ff8:	6842      	ldr	r2, [r0, #4]
 8003ffa:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8003ffe:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004002:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004006:	4607      	mov	r7, r0
 8004008:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800400c:	f000 80af 	beq.w	800416e <arm_cfft_radix8by2_f32+0x182>
 8004010:	3310      	adds	r3, #16
 8004012:	18ce      	adds	r6, r1, r3
 8004014:	3210      	adds	r2, #16
 8004016:	4443      	add	r3, r8
 8004018:	f101 0510 	add.w	r5, r1, #16
 800401c:	f108 0410 	add.w	r4, r8, #16
 8004020:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004024:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004028:	ed53 3a03 	vldr	s7, [r3, #-12]
 800402c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004030:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004034:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004038:	ed14 0a02 	vldr	s0, [r4, #-8]
 800403c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004040:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004044:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004048:	ed15 7a01 	vldr	s14, [r5, #-4]
 800404c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004050:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004054:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004058:	ed16 1a01 	vldr	s2, [r6, #-4]
 800405c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004060:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004064:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004068:	ee37 aa27 	vadd.f32	s20, s14, s15
 800406c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004070:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004074:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004078:	ee74 aa80 	vadd.f32	s21, s9, s0
 800407c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004080:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004084:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004088:	ed45 aa02 	vstr	s21, [r5, #-8]
 800408c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004090:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004094:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004098:	ed06 9a03 	vstr	s18, [r6, #-12]
 800409c:	ed46 8a02 	vstr	s17, [r6, #-8]
 80040a0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80040a4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80040a8:	ed12 6a03 	vldr	s12, [r2, #-12]
 80040ac:	ed52 2a04 	vldr	s5, [r2, #-16]
 80040b0:	ee33 3a61 	vsub.f32	s6, s6, s3
 80040b4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80040b8:	ee26 8a86 	vmul.f32	s16, s13, s12
 80040bc:	ee24 2a06 	vmul.f32	s4, s8, s12
 80040c0:	ee63 1a22 	vmul.f32	s3, s6, s5
 80040c4:	ee24 4a22 	vmul.f32	s8, s8, s5
 80040c8:	ee23 3a06 	vmul.f32	s6, s6, s12
 80040cc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80040d0:	ee23 6a86 	vmul.f32	s12, s7, s12
 80040d4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80040d8:	ee36 6a04 	vadd.f32	s12, s12, s8
 80040dc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80040e0:	ee72 3a63 	vsub.f32	s7, s4, s7
 80040e4:	ee71 2a88 	vadd.f32	s5, s3, s16
 80040e8:	ed44 6a03 	vstr	s13, [r4, #-12]
 80040ec:	ed44 2a04 	vstr	s5, [r4, #-16]
 80040f0:	ed43 3a04 	vstr	s7, [r3, #-16]
 80040f4:	ed03 6a03 	vstr	s12, [r3, #-12]
 80040f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040fc:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004100:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004104:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004108:	ee35 6a41 	vsub.f32	s12, s10, s2
 800410c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004110:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004114:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004118:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800411c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004120:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004124:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004128:	ee26 7a07 	vmul.f32	s14, s12, s14
 800412c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004130:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004134:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004138:	ee35 6a46 	vsub.f32	s12, s10, s12
 800413c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004140:	f1be 0e01 	subs.w	lr, lr, #1
 8004144:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004148:	f105 0510 	add.w	r5, r5, #16
 800414c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004150:	f106 0610 	add.w	r6, r6, #16
 8004154:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004158:	ed03 7a01 	vstr	s14, [r3, #-4]
 800415c:	f102 0210 	add.w	r2, r2, #16
 8004160:	f104 0410 	add.w	r4, r4, #16
 8004164:	f103 0310 	add.w	r3, r3, #16
 8004168:	f47f af5a 	bne.w	8004020 <arm_cfft_radix8by2_f32+0x34>
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	fa1f f48c 	uxth.w	r4, ip
 8004172:	4608      	mov	r0, r1
 8004174:	2302      	movs	r3, #2
 8004176:	4621      	mov	r1, r4
 8004178:	f000 fae2 	bl	8004740 <arm_radix8_butterfly_f32>
 800417c:	ecbd 8b08 	vpop	{d8-d11}
 8004180:	4640      	mov	r0, r8
 8004182:	4621      	mov	r1, r4
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	2302      	movs	r3, #2
 8004188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418c:	f000 bad8 	b.w	8004740 <arm_radix8_butterfly_f32>

08004190 <arm_cfft_radix8by4_f32>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	ed2d 8b0a 	vpush	{d8-d12}
 8004198:	8802      	ldrh	r2, [r0, #0]
 800419a:	ed91 6a00 	vldr	s12, [r1]
 800419e:	b08f      	sub	sp, #60	; 0x3c
 80041a0:	460f      	mov	r7, r1
 80041a2:	0852      	lsrs	r2, r2, #1
 80041a4:	0093      	lsls	r3, r2, #2
 80041a6:	900c      	str	r0, [sp, #48]	; 0x30
 80041a8:	9103      	str	r1, [sp, #12]
 80041aa:	6841      	ldr	r1, [r0, #4]
 80041ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80041b0:	4638      	mov	r0, r7
 80041b2:	4418      	add	r0, r3
 80041b4:	4606      	mov	r6, r0
 80041b6:	9009      	str	r0, [sp, #36]	; 0x24
 80041b8:	4418      	add	r0, r3
 80041ba:	edd0 6a00 	vldr	s13, [r0]
 80041be:	edd6 3a00 	vldr	s7, [r6]
 80041c2:	edd6 2a01 	vldr	s5, [r6, #4]
 80041c6:	edd0 7a01 	vldr	s15, [r0, #4]
 80041ca:	900a      	str	r0, [sp, #40]	; 0x28
 80041cc:	ee76 5a26 	vadd.f32	s11, s12, s13
 80041d0:	4604      	mov	r4, r0
 80041d2:	4625      	mov	r5, r4
 80041d4:	441c      	add	r4, r3
 80041d6:	ed94 4a00 	vldr	s8, [r4]
 80041da:	ed94 5a01 	vldr	s10, [r4, #4]
 80041de:	9401      	str	r4, [sp, #4]
 80041e0:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80041e4:	4630      	mov	r0, r6
 80041e6:	ee74 4a24 	vadd.f32	s9, s8, s9
 80041ea:	463e      	mov	r6, r7
 80041ec:	ee14 ea90 	vmov	lr, s9
 80041f0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80041f4:	f846 eb08 	str.w	lr, [r6], #8
 80041f8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80041fc:	edd0 4a01 	vldr	s9, [r0, #4]
 8004200:	9604      	str	r6, [sp, #16]
 8004202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004206:	9e01      	ldr	r6, [sp, #4]
 8004208:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800420c:	ed96 2a01 	vldr	s4, [r6, #4]
 8004210:	ee36 7a24 	vadd.f32	s14, s12, s9
 8004214:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8004218:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800421c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004220:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004224:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004228:	ee73 3a45 	vsub.f32	s7, s6, s10
 800422c:	4604      	mov	r4, r0
 800422e:	ee36 6a45 	vsub.f32	s12, s12, s10
 8004232:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004236:	46a3      	mov	fp, r4
 8004238:	ee37 7a02 	vadd.f32	s14, s14, s4
 800423c:	ee34 5a84 	vadd.f32	s10, s9, s8
 8004240:	ee13 8a90 	vmov	r8, s7
 8004244:	46a4      	mov	ip, r4
 8004246:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800424a:	ed87 7a01 	vstr	s14, [r7, #4]
 800424e:	f84b 8b08 	str.w	r8, [fp], #8
 8004252:	f1ac 0704 	sub.w	r7, ip, #4
 8004256:	ed8c 5a01 	vstr	s10, [ip, #4]
 800425a:	f101 0c08 	add.w	ip, r1, #8
 800425e:	462c      	mov	r4, r5
 8004260:	f8cd c014 	str.w	ip, [sp, #20]
 8004264:	ee15 ca90 	vmov	ip, s11
 8004268:	f844 cb08 	str.w	ip, [r4], #8
 800426c:	9407      	str	r4, [sp, #28]
 800426e:	f101 0410 	add.w	r4, r1, #16
 8004272:	ed85 6a01 	vstr	s12, [r5, #4]
 8004276:	0852      	lsrs	r2, r2, #1
 8004278:	9402      	str	r4, [sp, #8]
 800427a:	462c      	mov	r4, r5
 800427c:	f101 0518 	add.w	r5, r1, #24
 8004280:	920b      	str	r2, [sp, #44]	; 0x2c
 8004282:	46b2      	mov	sl, r6
 8004284:	9506      	str	r5, [sp, #24]
 8004286:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800428a:	3a02      	subs	r2, #2
 800428c:	ee16 5a90 	vmov	r5, s13
 8004290:	46b6      	mov	lr, r6
 8004292:	4630      	mov	r0, r6
 8004294:	0852      	lsrs	r2, r2, #1
 8004296:	f84a 5b08 	str.w	r5, [sl], #8
 800429a:	f1a0 0604 	sub.w	r6, r0, #4
 800429e:	edce 7a01 	vstr	s15, [lr, #4]
 80042a2:	9208      	str	r2, [sp, #32]
 80042a4:	f000 8130 	beq.w	8004508 <arm_cfft_radix8by4_f32+0x378>
 80042a8:	4691      	mov	r9, r2
 80042aa:	9a03      	ldr	r2, [sp, #12]
 80042ac:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80042b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80042b4:	3b08      	subs	r3, #8
 80042b6:	f102 0510 	add.w	r5, r2, #16
 80042ba:	f101 0c20 	add.w	ip, r1, #32
 80042be:	f1a4 020c 	sub.w	r2, r4, #12
 80042c2:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80042c6:	4433      	add	r3, r6
 80042c8:	3410      	adds	r4, #16
 80042ca:	4650      	mov	r0, sl
 80042cc:	4659      	mov	r1, fp
 80042ce:	ed55 3a02 	vldr	s7, [r5, #-8]
 80042d2:	ed14 5a02 	vldr	s10, [r4, #-8]
 80042d6:	ed91 7a00 	vldr	s14, [r1]
 80042da:	edd0 7a00 	vldr	s15, [r0]
 80042de:	ed15 4a01 	vldr	s8, [r5, #-4]
 80042e2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80042e6:	edd0 6a01 	vldr	s13, [r0, #4]
 80042ea:	ed91 6a01 	vldr	s12, [r1, #4]
 80042ee:	ee33 8a85 	vadd.f32	s16, s7, s10
 80042f2:	ee34 0a25 	vadd.f32	s0, s8, s11
 80042f6:	ee78 4a07 	vadd.f32	s9, s16, s14
 80042fa:	ee74 5a65 	vsub.f32	s11, s8, s11
 80042fe:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8004302:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004306:	ed45 4a02 	vstr	s9, [r5, #-8]
 800430a:	edd1 4a01 	vldr	s9, [r1, #4]
 800430e:	ed90 4a01 	vldr	s8, [r0, #4]
 8004312:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004316:	ee76 aa05 	vadd.f32	s21, s12, s10
 800431a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800431e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004322:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004326:	edd6 1a00 	vldr	s3, [r6]
 800432a:	edd7 0a00 	vldr	s1, [r7]
 800432e:	ed92 4a02 	vldr	s8, [r2, #8]
 8004332:	edd3 3a02 	vldr	s7, [r3, #8]
 8004336:	ed93 2a01 	vldr	s4, [r3, #4]
 800433a:	ed16 1a01 	vldr	s2, [r6, #-4]
 800433e:	edd2 2a01 	vldr	s5, [r2, #4]
 8004342:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004346:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800434a:	ee39 3a81 	vadd.f32	s6, s19, s2
 800434e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004352:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004356:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800435a:	ee7a aae6 	vsub.f32	s21, s21, s13
 800435e:	ee18 aa90 	vmov	sl, s17
 8004362:	f847 a908 	str.w	sl, [r7], #-8
 8004366:	edd2 8a01 	vldr	s17, [r2, #4]
 800436a:	ed93 9a01 	vldr	s18, [r3, #4]
 800436e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8004372:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004376:	ee78 8a89 	vadd.f32	s17, s17, s18
 800437a:	ee74 0a63 	vsub.f32	s1, s8, s7
 800437e:	edc7 8a01 	vstr	s17, [r7, #4]
 8004382:	ed18 ba02 	vldr	s22, [r8, #-8]
 8004386:	ed58 8a01 	vldr	s17, [r8, #-4]
 800438a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800438e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8004392:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8004396:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800439a:	ee30 9a81 	vadd.f32	s18, s1, s2
 800439e:	ee79 9a82 	vadd.f32	s19, s19, s4
 80043a2:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80043a6:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80043aa:	ee69 baa8 	vmul.f32	s23, s19, s17
 80043ae:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80043b2:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80043b6:	ee69 8a28 	vmul.f32	s17, s18, s17
 80043ba:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80043be:	ee1c aa10 	vmov	sl, s24
 80043c2:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80043c6:	f841 ab08 	str.w	sl, [r1], #8
 80043ca:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80043ce:	ee3b bacb 	vsub.f32	s22, s23, s22
 80043d2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80043d6:	ee33 3a62 	vsub.f32	s6, s6, s5
 80043da:	ed01 aa01 	vstr	s20, [r1, #-4]
 80043de:	edc2 8a01 	vstr	s17, [r2, #4]
 80043e2:	ed82 ba02 	vstr	s22, [r2, #8]
 80043e6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80043ea:	ee74 3a63 	vsub.f32	s7, s8, s7
 80043ee:	ee38 8a47 	vsub.f32	s16, s16, s14
 80043f2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80043f6:	ee30 0a46 	vsub.f32	s0, s0, s12
 80043fa:	ee33 3a42 	vsub.f32	s6, s6, s4
 80043fe:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004402:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004406:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800440a:	ee63 8a04 	vmul.f32	s17, s6, s8
 800440e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8004412:	ee60 9a04 	vmul.f32	s19, s0, s8
 8004416:	ee28 8a04 	vmul.f32	s16, s16, s8
 800441a:	ee20 0a24 	vmul.f32	s0, s0, s9
 800441e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8004422:	ee39 4a68 	vsub.f32	s8, s18, s17
 8004426:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800442a:	ee14 aa10 	vmov	sl, s8
 800442e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004432:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004436:	ed44 9a02 	vstr	s19, [r4, #-8]
 800443a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800443e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8004442:	f846 a908 	str.w	sl, [r6], #-8
 8004446:	ee35 6a46 	vsub.f32	s12, s10, s12
 800444a:	ee35 7a87 	vadd.f32	s14, s11, s14
 800444e:	edc6 3a01 	vstr	s7, [r6, #4]
 8004452:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800445a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800445e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8004462:	ee67 5a86 	vmul.f32	s11, s15, s12
 8004466:	ee26 5a87 	vmul.f32	s10, s13, s14
 800446a:	ee72 2a62 	vsub.f32	s5, s4, s5
 800446e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004472:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8004476:	ee75 5a25 	vadd.f32	s11, s10, s11
 800447a:	ee62 0a86 	vmul.f32	s1, s5, s12
 800447e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004486:	ee21 6a06 	vmul.f32	s12, s2, s12
 800448a:	ee62 2a87 	vmul.f32	s5, s5, s14
 800448e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8004492:	ee15 aa90 	vmov	sl, s11
 8004496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800449a:	f840 ab08 	str.w	sl, [r0], #8
 800449e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80044a2:	ee76 2a22 	vadd.f32	s5, s12, s5
 80044a6:	f1b9 0901 	subs.w	r9, r9, #1
 80044aa:	ed40 7a01 	vstr	s15, [r0, #-4]
 80044ae:	f105 0508 	add.w	r5, r5, #8
 80044b2:	ed83 1a02 	vstr	s2, [r3, #8]
 80044b6:	edc3 2a01 	vstr	s5, [r3, #4]
 80044ba:	f108 0808 	add.w	r8, r8, #8
 80044be:	f1a2 0208 	sub.w	r2, r2, #8
 80044c2:	f10c 0c10 	add.w	ip, ip, #16
 80044c6:	f104 0408 	add.w	r4, r4, #8
 80044ca:	f10e 0e18 	add.w	lr, lr, #24
 80044ce:	f1a3 0308 	sub.w	r3, r3, #8
 80044d2:	f47f aefc 	bne.w	80042ce <arm_cfft_radix8by4_f32+0x13e>
 80044d6:	9908      	ldr	r1, [sp, #32]
 80044d8:	9802      	ldr	r0, [sp, #8]
 80044da:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80044e4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80044e8:	9102      	str	r1, [sp, #8]
 80044ea:	9904      	ldr	r1, [sp, #16]
 80044ec:	4419      	add	r1, r3
 80044ee:	9104      	str	r1, [sp, #16]
 80044f0:	9905      	ldr	r1, [sp, #20]
 80044f2:	4419      	add	r1, r3
 80044f4:	9105      	str	r1, [sp, #20]
 80044f6:	9907      	ldr	r1, [sp, #28]
 80044f8:	449b      	add	fp, r3
 80044fa:	4419      	add	r1, r3
 80044fc:	449a      	add	sl, r3
 80044fe:	9b06      	ldr	r3, [sp, #24]
 8004500:	9107      	str	r1, [sp, #28]
 8004502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004506:	9306      	str	r3, [sp, #24]
 8004508:	9a04      	ldr	r2, [sp, #16]
 800450a:	9807      	ldr	r0, [sp, #28]
 800450c:	edd2 3a00 	vldr	s7, [r2]
 8004510:	ed90 4a00 	vldr	s8, [r0]
 8004514:	eddb 7a00 	vldr	s15, [fp]
 8004518:	ed9a 3a00 	vldr	s6, [sl]
 800451c:	edd2 4a01 	vldr	s9, [r2, #4]
 8004520:	ed90 7a01 	vldr	s14, [r0, #4]
 8004524:	ed9b 2a01 	vldr	s4, [fp, #4]
 8004528:	edda 5a01 	vldr	s11, [sl, #4]
 800452c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004530:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004532:	ee73 6a84 	vadd.f32	s13, s7, s8
 8004536:	ee34 6a87 	vadd.f32	s12, s9, s14
 800453a:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800453e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8004542:	ee33 5a05 	vadd.f32	s10, s6, s10
 8004546:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800454a:	ed82 5a00 	vstr	s10, [r2]
 800454e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004552:	edda 4a01 	vldr	s9, [sl, #4]
 8004556:	ee36 5a05 	vadd.f32	s10, s12, s10
 800455a:	ee72 3a04 	vadd.f32	s7, s4, s8
 800455e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004562:	ee77 4a67 	vsub.f32	s9, s14, s15
 8004566:	ed82 5a01 	vstr	s10, [r2, #4]
 800456a:	9a05      	ldr	r2, [sp, #20]
 800456c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004570:	edd2 1a00 	vldr	s3, [r2]
 8004574:	edd2 2a01 	vldr	s5, [r2, #4]
 8004578:	9a02      	ldr	r2, [sp, #8]
 800457a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800457e:	ee36 6a42 	vsub.f32	s12, s12, s4
 8004582:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8004586:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800458a:	ee65 2a22 	vmul.f32	s5, s10, s5
 800458e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004592:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004596:	ee35 5a63 	vsub.f32	s10, s10, s7
 800459a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800459e:	edcb 2a00 	vstr	s5, [fp]
 80045a2:	ed8b 5a01 	vstr	s10, [fp, #4]
 80045a6:	edd2 3a01 	vldr	s7, [r2, #4]
 80045aa:	ed92 5a00 	vldr	s10, [r2]
 80045ae:	9a06      	ldr	r2, [sp, #24]
 80045b0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80045b4:	ee36 6a65 	vsub.f32	s12, s12, s11
 80045b8:	ee66 4a85 	vmul.f32	s9, s13, s10
 80045bc:	ee26 5a05 	vmul.f32	s10, s12, s10
 80045c0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80045c4:	ee26 6a23 	vmul.f32	s12, s12, s7
 80045c8:	ee75 6a66 	vsub.f32	s13, s10, s13
 80045cc:	ee34 6a86 	vadd.f32	s12, s9, s12
 80045d0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80045d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045d8:	edc0 6a01 	vstr	s13, [r0, #4]
 80045dc:	ed80 6a00 	vstr	s12, [r0]
 80045e0:	ed92 6a01 	vldr	s12, [r2, #4]
 80045e4:	9803      	ldr	r0, [sp, #12]
 80045e6:	ee77 7a43 	vsub.f32	s15, s14, s6
 80045ea:	ee75 5a84 	vadd.f32	s11, s11, s8
 80045ee:	ed92 7a00 	vldr	s14, [r2]
 80045f2:	ee65 6a87 	vmul.f32	s13, s11, s14
 80045f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045fa:	ee65 5a86 	vmul.f32	s11, s11, s12
 80045fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004602:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460a:	edca 5a01 	vstr	s11, [sl, #4]
 800460e:	edca 7a00 	vstr	s15, [sl]
 8004612:	6872      	ldr	r2, [r6, #4]
 8004614:	4621      	mov	r1, r4
 8004616:	2304      	movs	r3, #4
 8004618:	f000 f892 	bl	8004740 <arm_radix8_butterfly_f32>
 800461c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800461e:	6872      	ldr	r2, [r6, #4]
 8004620:	4621      	mov	r1, r4
 8004622:	2304      	movs	r3, #4
 8004624:	f000 f88c 	bl	8004740 <arm_radix8_butterfly_f32>
 8004628:	980a      	ldr	r0, [sp, #40]	; 0x28
 800462a:	6872      	ldr	r2, [r6, #4]
 800462c:	4621      	mov	r1, r4
 800462e:	2304      	movs	r3, #4
 8004630:	f000 f886 	bl	8004740 <arm_radix8_butterfly_f32>
 8004634:	9801      	ldr	r0, [sp, #4]
 8004636:	6872      	ldr	r2, [r6, #4]
 8004638:	4621      	mov	r1, r4
 800463a:	2304      	movs	r3, #4
 800463c:	b00f      	add	sp, #60	; 0x3c
 800463e:	ecbd 8b0a 	vpop	{d8-d12}
 8004642:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004646:	f000 b87b 	b.w	8004740 <arm_radix8_butterfly_f32>
 800464a:	bf00      	nop

0800464c <arm_cfft_f32>:
 800464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004650:	2a01      	cmp	r2, #1
 8004652:	4606      	mov	r6, r0
 8004654:	4617      	mov	r7, r2
 8004656:	460c      	mov	r4, r1
 8004658:	4698      	mov	r8, r3
 800465a:	8805      	ldrh	r5, [r0, #0]
 800465c:	d054      	beq.n	8004708 <arm_cfft_f32+0xbc>
 800465e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004662:	d04c      	beq.n	80046fe <arm_cfft_f32+0xb2>
 8004664:	d916      	bls.n	8004694 <arm_cfft_f32+0x48>
 8004666:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800466a:	d01a      	beq.n	80046a2 <arm_cfft_f32+0x56>
 800466c:	d95c      	bls.n	8004728 <arm_cfft_f32+0xdc>
 800466e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004672:	d044      	beq.n	80046fe <arm_cfft_f32+0xb2>
 8004674:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004678:	d105      	bne.n	8004686 <arm_cfft_f32+0x3a>
 800467a:	4620      	mov	r0, r4
 800467c:	4629      	mov	r1, r5
 800467e:	6872      	ldr	r2, [r6, #4]
 8004680:	2301      	movs	r3, #1
 8004682:	f000 f85d 	bl	8004740 <arm_radix8_butterfly_f32>
 8004686:	f1b8 0f00 	cmp.w	r8, #0
 800468a:	d111      	bne.n	80046b0 <arm_cfft_f32+0x64>
 800468c:	2f01      	cmp	r7, #1
 800468e:	d016      	beq.n	80046be <arm_cfft_f32+0x72>
 8004690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004694:	2d20      	cmp	r5, #32
 8004696:	d032      	beq.n	80046fe <arm_cfft_f32+0xb2>
 8004698:	d94a      	bls.n	8004730 <arm_cfft_f32+0xe4>
 800469a:	2d40      	cmp	r5, #64	; 0x40
 800469c:	d0ed      	beq.n	800467a <arm_cfft_f32+0x2e>
 800469e:	2d80      	cmp	r5, #128	; 0x80
 80046a0:	d1f1      	bne.n	8004686 <arm_cfft_f32+0x3a>
 80046a2:	4630      	mov	r0, r6
 80046a4:	4621      	mov	r1, r4
 80046a6:	f7ff fca1 	bl	8003fec <arm_cfft_radix8by2_f32>
 80046aa:	f1b8 0f00 	cmp.w	r8, #0
 80046ae:	d0ed      	beq.n	800468c <arm_cfft_f32+0x40>
 80046b0:	4620      	mov	r0, r4
 80046b2:	89b1      	ldrh	r1, [r6, #12]
 80046b4:	68b2      	ldr	r2, [r6, #8]
 80046b6:	f7fb fd8f 	bl	80001d8 <arm_bitreversal_32>
 80046ba:	2f01      	cmp	r7, #1
 80046bc:	d1e8      	bne.n	8004690 <arm_cfft_f32+0x44>
 80046be:	ee07 5a90 	vmov	s15, r5
 80046c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80046ca:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	d0de      	beq.n	8004690 <arm_cfft_f32+0x44>
 80046d2:	f104 0108 	add.w	r1, r4, #8
 80046d6:	2300      	movs	r3, #0
 80046d8:	3301      	adds	r3, #1
 80046da:	429d      	cmp	r5, r3
 80046dc:	f101 0108 	add.w	r1, r1, #8
 80046e0:	ed11 7a04 	vldr	s14, [r1, #-16]
 80046e4:	ed51 7a03 	vldr	s15, [r1, #-12]
 80046e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80046ec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80046f0:	ed01 7a04 	vstr	s14, [r1, #-16]
 80046f4:	ed41 7a03 	vstr	s15, [r1, #-12]
 80046f8:	d1ee      	bne.n	80046d8 <arm_cfft_f32+0x8c>
 80046fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046fe:	4630      	mov	r0, r6
 8004700:	4621      	mov	r1, r4
 8004702:	f7ff fd45 	bl	8004190 <arm_cfft_radix8by4_f32>
 8004706:	e7be      	b.n	8004686 <arm_cfft_f32+0x3a>
 8004708:	b1ad      	cbz	r5, 8004736 <arm_cfft_f32+0xea>
 800470a:	f101 030c 	add.w	r3, r1, #12
 800470e:	2200      	movs	r2, #0
 8004710:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004714:	3201      	adds	r2, #1
 8004716:	eef1 7a67 	vneg.f32	s15, s15
 800471a:	4295      	cmp	r5, r2
 800471c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004720:	f103 0308 	add.w	r3, r3, #8
 8004724:	d1f4      	bne.n	8004710 <arm_cfft_f32+0xc4>
 8004726:	e79a      	b.n	800465e <arm_cfft_f32+0x12>
 8004728:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800472c:	d0a5      	beq.n	800467a <arm_cfft_f32+0x2e>
 800472e:	e7aa      	b.n	8004686 <arm_cfft_f32+0x3a>
 8004730:	2d10      	cmp	r5, #16
 8004732:	d0b6      	beq.n	80046a2 <arm_cfft_f32+0x56>
 8004734:	e7a7      	b.n	8004686 <arm_cfft_f32+0x3a>
 8004736:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800473a:	d894      	bhi.n	8004666 <arm_cfft_f32+0x1a>
 800473c:	e7aa      	b.n	8004694 <arm_cfft_f32+0x48>
 800473e:	bf00      	nop

08004740 <arm_radix8_butterfly_f32>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	ed2d 8b10 	vpush	{d8-d15}
 8004748:	b09d      	sub	sp, #116	; 0x74
 800474a:	461c      	mov	r4, r3
 800474c:	ed9f bac8 	vldr	s22, [pc, #800]	; 8004a70 <arm_radix8_butterfly_f32+0x330>
 8004750:	921a      	str	r2, [sp, #104]	; 0x68
 8004752:	1d03      	adds	r3, r0, #4
 8004754:	4682      	mov	sl, r0
 8004756:	4689      	mov	r9, r1
 8004758:	468b      	mov	fp, r1
 800475a:	931b      	str	r3, [sp, #108]	; 0x6c
 800475c:	9400      	str	r4, [sp, #0]
 800475e:	469e      	mov	lr, r3
 8004760:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004764:	005a      	lsls	r2, r3, #1
 8004766:	18d6      	adds	r6, r2, r3
 8004768:	18f5      	adds	r5, r6, r3
 800476a:	9203      	str	r2, [sp, #12]
 800476c:	195a      	adds	r2, r3, r5
 800476e:	18d0      	adds	r0, r2, r3
 8004770:	00df      	lsls	r7, r3, #3
 8004772:	1819      	adds	r1, r3, r0
 8004774:	463c      	mov	r4, r7
 8004776:	9701      	str	r7, [sp, #4]
 8004778:	4457      	add	r7, sl
 800477a:	930c      	str	r3, [sp, #48]	; 0x30
 800477c:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8004786:	eb07 0c04 	add.w	ip, r7, r4
 800478a:	9c00      	ldr	r4, [sp, #0]
 800478c:	9302      	str	r3, [sp, #8]
 800478e:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8004792:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8004796:	3204      	adds	r2, #4
 8004798:	3104      	adds	r1, #4
 800479a:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800479e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047a2:	f04f 0800 	mov.w	r8, #0
 80047a6:	eddc 7a00 	vldr	s15, [ip]
 80047aa:	edd7 6a00 	vldr	s13, [r7]
 80047ae:	edd6 3a00 	vldr	s7, [r6]
 80047b2:	ed5e aa01 	vldr	s21, [lr, #-4]
 80047b6:	edd5 4a00 	vldr	s9, [r5]
 80047ba:	ed90 2a00 	vldr	s4, [r0]
 80047be:	ed12 7a01 	vldr	s14, [r2, #-4]
 80047c2:	ed51 0a01 	vldr	s1, [r1, #-4]
 80047c6:	ee77 8a82 	vadd.f32	s17, s15, s4
 80047ca:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80047ce:	ee76 1a87 	vadd.f32	s3, s13, s14
 80047d2:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80047d6:	ee31 6a84 	vadd.f32	s12, s3, s8
 80047da:	ee33 5a28 	vadd.f32	s10, s6, s17
 80047de:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80047e2:	ee75 6a06 	vadd.f32	s13, s10, s12
 80047e6:	ee35 5a46 	vsub.f32	s10, s10, s12
 80047ea:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80047ee:	ed85 5a00 	vstr	s10, [r5]
 80047f2:	ed96 1a01 	vldr	s2, [r6, #4]
 80047f6:	edd7 5a01 	vldr	s11, [r7, #4]
 80047fa:	ed92 aa00 	vldr	s20, [r2]
 80047fe:	ed91 6a00 	vldr	s12, [r1]
 8004802:	ed9e 9a00 	vldr	s18, [lr]
 8004806:	ed95 5a01 	vldr	s10, [r5, #4]
 800480a:	eddc 6a01 	vldr	s13, [ip, #4]
 800480e:	edd0 9a01 	vldr	s19, [r0, #4]
 8004812:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8004816:	ee71 2a46 	vsub.f32	s5, s2, s12
 800481a:	ee75 3aca 	vsub.f32	s7, s11, s20
 800481e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004822:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8004826:	ee37 7a20 	vadd.f32	s14, s14, s1
 800482a:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800482e:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8004832:	ee79 3a05 	vadd.f32	s7, s18, s10
 8004836:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800483a:	ee39 5a45 	vsub.f32	s10, s18, s10
 800483e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8004842:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004846:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800484a:	ee31 6a06 	vadd.f32	s12, s2, s12
 800484e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004852:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004856:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800485a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800485e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004862:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004866:	ee75 8a86 	vadd.f32	s17, s11, s12
 800486a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800486e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8004872:	ee75 6a62 	vsub.f32	s13, s10, s5
 8004876:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800487a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800487e:	ee33 1a89 	vadd.f32	s2, s7, s18
 8004882:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8004886:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800488a:	ee75 4a22 	vadd.f32	s9, s10, s5
 800488e:	ee32 5a27 	vadd.f32	s10, s4, s15
 8004892:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004896:	ee33 8a06 	vadd.f32	s16, s6, s12
 800489a:	ee75 2a87 	vadd.f32	s5, s11, s14
 800489e:	ee31 9a28 	vadd.f32	s18, s2, s17
 80048a2:	ee33 6a46 	vsub.f32	s12, s6, s12
 80048a6:	ee74 0a61 	vsub.f32	s1, s8, s3
 80048aa:	ee33 2a80 	vadd.f32	s4, s7, s0
 80048ae:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80048b2:	ee34 3ac5 	vsub.f32	s6, s9, s10
 80048b6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80048ba:	ee31 1a68 	vsub.f32	s2, s2, s17
 80048be:	ee34 4a21 	vadd.f32	s8, s8, s3
 80048c2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80048c6:	ee74 4a85 	vadd.f32	s9, s9, s10
 80048ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80048ce:	44d8      	add	r8, fp
 80048d0:	45c1      	cmp	r9, r8
 80048d2:	ed8e 9a00 	vstr	s18, [lr]
 80048d6:	ed85 1a01 	vstr	s2, [r5, #4]
 80048da:	449e      	add	lr, r3
 80048dc:	ed8c 8a00 	vstr	s16, [ip]
 80048e0:	441d      	add	r5, r3
 80048e2:	ed80 6a00 	vstr	s12, [r0]
 80048e6:	edcc 0a01 	vstr	s1, [ip, #4]
 80048ea:	ed80 4a01 	vstr	s8, [r0, #4]
 80048ee:	449c      	add	ip, r3
 80048f0:	ed87 2a00 	vstr	s4, [r7]
 80048f4:	4418      	add	r0, r3
 80048f6:	ed41 3a01 	vstr	s7, [r1, #-4]
 80048fa:	ed42 2a01 	vstr	s5, [r2, #-4]
 80048fe:	ed86 7a00 	vstr	s14, [r6]
 8004902:	ed87 3a01 	vstr	s6, [r7, #4]
 8004906:	edc1 4a00 	vstr	s9, [r1]
 800490a:	441f      	add	r7, r3
 800490c:	edc2 5a00 	vstr	s11, [r2]
 8004910:	4419      	add	r1, r3
 8004912:	edc6 6a01 	vstr	s13, [r6, #4]
 8004916:	441a      	add	r2, r3
 8004918:	441e      	add	r6, r3
 800491a:	f63f af44 	bhi.w	80047a6 <arm_radix8_butterfly_f32+0x66>
 800491e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004920:	2907      	cmp	r1, #7
 8004922:	4620      	mov	r0, r4
 8004924:	f240 81e9 	bls.w	8004cfa <arm_radix8_butterfly_f32+0x5ba>
 8004928:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800492c:	193e      	adds	r6, r7, r4
 800492e:	1935      	adds	r5, r6, r4
 8004930:	9c03      	ldr	r4, [sp, #12]
 8004932:	9000      	str	r0, [sp, #0]
 8004934:	4622      	mov	r2, r4
 8004936:	3201      	adds	r2, #1
 8004938:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800493c:	9900      	ldr	r1, [sp, #0]
 800493e:	1828      	adds	r0, r5, r0
 8004940:	eb00 0e01 	add.w	lr, r0, r1
 8004944:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004946:	440a      	add	r2, r1
 8004948:	eb04 0c01 	add.w	ip, r4, r1
 800494c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8004950:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8004954:	9a00      	ldr	r2, [sp, #0]
 8004956:	940f      	str	r4, [sp, #60]	; 0x3c
 8004958:	00ed      	lsls	r5, r5, #3
 800495a:	9511      	str	r5, [sp, #68]	; 0x44
 800495c:	00d5      	lsls	r5, r2, #3
 800495e:	950d      	str	r5, [sp, #52]	; 0x34
 8004960:	9d01      	ldr	r5, [sp, #4]
 8004962:	3508      	adds	r5, #8
 8004964:	9516      	str	r5, [sp, #88]	; 0x58
 8004966:	9d02      	ldr	r5, [sp, #8]
 8004968:	3508      	adds	r5, #8
 800496a:	0114      	lsls	r4, r2, #4
 800496c:	9517      	str	r5, [sp, #92]	; 0x5c
 800496e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004970:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004972:	940e      	str	r4, [sp, #56]	; 0x38
 8004974:	00c0      	lsls	r0, r0, #3
 8004976:	9010      	str	r0, [sp, #64]	; 0x40
 8004978:	18aa      	adds	r2, r5, r2
 800497a:	9207      	str	r2, [sp, #28]
 800497c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800497e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004980:	18aa      	adds	r2, r5, r2
 8004982:	9208      	str	r2, [sp, #32]
 8004984:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004986:	18aa      	adds	r2, r5, r2
 8004988:	9209      	str	r2, [sp, #36]	; 0x24
 800498a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800498e:	f10e 0204 	add.w	r2, lr, #4
 8004992:	920a      	str	r2, [sp, #40]	; 0x28
 8004994:	00c9      	lsls	r1, r1, #3
 8004996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004998:	310c      	adds	r1, #12
 800499a:	00f6      	lsls	r6, r6, #3
 800499c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80049a0:	9114      	str	r1, [sp, #80]	; 0x50
 80049a2:	18a9      	adds	r1, r5, r2
 80049a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049a6:	9612      	str	r6, [sp, #72]	; 0x48
 80049a8:	00ff      	lsls	r7, r7, #3
 80049aa:	19ae      	adds	r6, r5, r6
 80049ac:	3008      	adds	r0, #8
 80049ae:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80049b2:	9606      	str	r6, [sp, #24]
 80049b4:	9019      	str	r0, [sp, #100]	; 0x64
 80049b6:	18aa      	adds	r2, r5, r2
 80049b8:	0164      	lsls	r4, r4, #5
 80049ba:	19ee      	adds	r6, r5, r7
 80049bc:	f10c 000c 	add.w	r0, ip, #12
 80049c0:	9713      	str	r7, [sp, #76]	; 0x4c
 80049c2:	9604      	str	r6, [sp, #16]
 80049c4:	9015      	str	r0, [sp, #84]	; 0x54
 80049c6:	9103      	str	r1, [sp, #12]
 80049c8:	9205      	str	r2, [sp, #20]
 80049ca:	f104 0208 	add.w	r2, r4, #8
 80049ce:	9218      	str	r2, [sp, #96]	; 0x60
 80049d0:	f04f 0801 	mov.w	r8, #1
 80049d4:	2200      	movs	r2, #0
 80049d6:	f102 0108 	add.w	r1, r2, #8
 80049da:	460f      	mov	r7, r1
 80049dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80049de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049e0:	188e      	adds	r6, r1, r2
 80049e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80049e4:	188d      	adds	r5, r1, r2
 80049e6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80049e8:	188c      	adds	r4, r1, r2
 80049ea:	9919      	ldr	r1, [sp, #100]	; 0x64
 80049ec:	1888      	adds	r0, r1, r2
 80049ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 80049f0:	eb01 0c02 	add.w	ip, r1, r2
 80049f4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80049f6:	440a      	add	r2, r1
 80049f8:	9903      	ldr	r1, [sp, #12]
 80049fa:	edd1 fa00 	vldr	s31, [r1]
 80049fe:	9905      	ldr	r1, [sp, #20]
 8004a00:	ed91 fa00 	vldr	s30, [r1]
 8004a04:	9904      	ldr	r1, [sp, #16]
 8004a06:	edd1 ea00 	vldr	s29, [r1]
 8004a0a:	9906      	ldr	r1, [sp, #24]
 8004a0c:	ed91 ea00 	vldr	s28, [r1]
 8004a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a12:	edd1 da00 	vldr	s27, [r1]
 8004a16:	9908      	ldr	r1, [sp, #32]
 8004a18:	ed91 da00 	vldr	s26, [r1]
 8004a1c:	9907      	ldr	r1, [sp, #28]
 8004a1e:	edd1 ca00 	vldr	s25, [r1]
 8004a22:	9903      	ldr	r1, [sp, #12]
 8004a24:	ed91 ca01 	vldr	s24, [r1, #4]
 8004a28:	9905      	ldr	r1, [sp, #20]
 8004a2a:	edd1 ba01 	vldr	s23, [r1, #4]
 8004a2e:	9904      	ldr	r1, [sp, #16]
 8004a30:	edd1 aa01 	vldr	s21, [r1, #4]
 8004a34:	9906      	ldr	r1, [sp, #24]
 8004a36:	ed91 aa01 	vldr	s20, [r1, #4]
 8004a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a3c:	edd1 7a01 	vldr	s15, [r1, #4]
 8004a40:	9908      	ldr	r1, [sp, #32]
 8004a42:	edcd 7a00 	vstr	s15, [sp]
 8004a46:	edd1 7a01 	vldr	s15, [r1, #4]
 8004a4a:	9907      	ldr	r1, [sp, #28]
 8004a4c:	edcd 7a01 	vstr	s15, [sp, #4]
 8004a50:	edd1 7a01 	vldr	s15, [r1, #4]
 8004a54:	eb0a 0e07 	add.w	lr, sl, r7
 8004a58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004a5a:	edcd 7a02 	vstr	s15, [sp, #8]
 8004a5e:	eb0c 010a 	add.w	r1, ip, sl
 8004a62:	4456      	add	r6, sl
 8004a64:	4455      	add	r5, sl
 8004a66:	4454      	add	r4, sl
 8004a68:	4450      	add	r0, sl
 8004a6a:	4452      	add	r2, sl
 8004a6c:	46c4      	mov	ip, r8
 8004a6e:	e001      	b.n	8004a74 <arm_radix8_butterfly_f32+0x334>
 8004a70:	3f3504f3 	.word	0x3f3504f3
 8004a74:	ed96 5a00 	vldr	s10, [r6]
 8004a78:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004a7c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8004a80:	edd0 7a00 	vldr	s15, [r0]
 8004a84:	ed17 7a01 	vldr	s14, [r7, #-4]
 8004a88:	edde 3a00 	vldr	s7, [lr]
 8004a8c:	ed94 3a00 	vldr	s6, [r4]
 8004a90:	ed95 2a00 	vldr	s4, [r5]
 8004a94:	ed9e 0a01 	vldr	s0, [lr, #4]
 8004a98:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004a9c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004aa0:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004aa4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004aa8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004aac:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004ab0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004ab4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004abc:	ed8e 6a00 	vstr	s12, [lr]
 8004ac0:	edd0 8a01 	vldr	s17, [r0, #4]
 8004ac4:	ed95 9a01 	vldr	s18, [r5, #4]
 8004ac8:	edd1 2a00 	vldr	s5, [r1]
 8004acc:	ed97 7a00 	vldr	s14, [r7]
 8004ad0:	edd4 0a01 	vldr	s1, [r4, #4]
 8004ad4:	ed96 6a01 	vldr	s12, [r6, #4]
 8004ad8:	edd2 5a00 	vldr	s11, [r2]
 8004adc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004ae0:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004ae4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004ae8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004aec:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004af0:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004af4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004af8:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004afc:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004b00:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004b04:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004b08:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004b0c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004b10:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004b14:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004b18:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004b1c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004b20:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004b24:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004b28:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004b2c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004b30:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004b34:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004b38:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004b3c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004b40:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004b44:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004b48:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004b4c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004b50:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004b54:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004b58:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004b5c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004b60:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004b64:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004b68:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004b6c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004b70:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004b74:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004b78:	ee72 4a24 	vadd.f32	s9, s4, s9
 8004b7c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004b80:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004b84:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004b88:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004b8c:	ee36 6a03 	vadd.f32	s12, s12, s6
 8004b90:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004b94:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004b98:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004b9c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004ba0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004ba4:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004ba8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004bac:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004bb0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004bb4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004bb8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004bbc:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004bc0:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004bc4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004bc8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004bcc:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004bd0:	ed8e 1a01 	vstr	s2, [lr, #4]
 8004bd4:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004bd8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004bdc:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004be0:	ed86 3a00 	vstr	s6, [r6]
 8004be4:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004be8:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004bec:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8004bf0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8004bf4:	ee67 2a22 	vmul.f32	s5, s14, s5
 8004bf8:	ee64 1a00 	vmul.f32	s3, s8, s0
 8004bfc:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004c00:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8004c04:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8004c08:	ee64 8a28 	vmul.f32	s17, s8, s17
 8004c0c:	ed9d 4a00 	vldr	s8, [sp]
 8004c10:	edc6 6a01 	vstr	s13, [r6, #4]
 8004c14:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004c18:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8004c1c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8004c20:	ee24 4a25 	vmul.f32	s8, s8, s11
 8004c24:	ee30 7a87 	vadd.f32	s14, s1, s14
 8004c28:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004c2c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8004c30:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8004c34:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8004c38:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8004c3c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8004c40:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004c44:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004c48:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004c4c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8004c50:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004c54:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004c58:	44dc      	add	ip, fp
 8004c5a:	45e1      	cmp	r9, ip
 8004c5c:	ed84 9a00 	vstr	s18, [r4]
 8004c60:	edc4 3a01 	vstr	s7, [r4, #4]
 8004c64:	449e      	add	lr, r3
 8004c66:	ed02 7a01 	vstr	s14, [r2, #-4]
 8004c6a:	edc2 2a00 	vstr	s5, [r2]
 8004c6e:	441e      	add	r6, r3
 8004c70:	ed85 2a00 	vstr	s4, [r5]
 8004c74:	ed85 8a01 	vstr	s16, [r5, #4]
 8004c78:	441c      	add	r4, r3
 8004c7a:	ed47 1a01 	vstr	s3, [r7, #-4]
 8004c7e:	ed87 0a00 	vstr	s0, [r7]
 8004c82:	441a      	add	r2, r3
 8004c84:	ed41 4a01 	vstr	s9, [r1, #-4]
 8004c88:	edc1 9a00 	vstr	s19, [r1]
 8004c8c:	441d      	add	r5, r3
 8004c8e:	edc0 0a00 	vstr	s1, [r0]
 8004c92:	441f      	add	r7, r3
 8004c94:	ed80 6a01 	vstr	s12, [r0, #4]
 8004c98:	4419      	add	r1, r3
 8004c9a:	4418      	add	r0, r3
 8004c9c:	f63f aeea 	bhi.w	8004a74 <arm_radix8_butterfly_f32+0x334>
 8004ca0:	9a03      	ldr	r2, [sp, #12]
 8004ca2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ca4:	440a      	add	r2, r1
 8004ca6:	9203      	str	r2, [sp, #12]
 8004ca8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004caa:	9a05      	ldr	r2, [sp, #20]
 8004cac:	440a      	add	r2, r1
 8004cae:	9205      	str	r2, [sp, #20]
 8004cb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004cb2:	9a04      	ldr	r2, [sp, #16]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	9204      	str	r2, [sp, #16]
 8004cb8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004cba:	9a06      	ldr	r2, [sp, #24]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	9206      	str	r2, [sp, #24]
 8004cc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cc4:	440a      	add	r2, r1
 8004cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8004cc8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004cca:	9a08      	ldr	r2, [sp, #32]
 8004ccc:	440a      	add	r2, r1
 8004cce:	9208      	str	r2, [sp, #32]
 8004cd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004cd2:	9a07      	ldr	r2, [sp, #28]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	9207      	str	r2, [sp, #28]
 8004cd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cdc:	f108 0801 	add.w	r8, r8, #1
 8004ce0:	3208      	adds	r2, #8
 8004ce2:	4588      	cmp	r8, r1
 8004ce4:	920a      	str	r2, [sp, #40]	; 0x28
 8004ce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ce8:	f47f ae75 	bne.w	80049d6 <arm_radix8_butterfly_f32+0x296>
 8004cec:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	46c3      	mov	fp, r8
 8004cf4:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8004cf8:	e532      	b.n	8004760 <arm_radix8_butterfly_f32+0x20>
 8004cfa:	b01d      	add	sp, #116	; 0x74
 8004cfc:	ecbd 8b10 	vpop	{d8-d15}
 8004d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004d04 <__errno>:
 8004d04:	4b01      	ldr	r3, [pc, #4]	; (8004d0c <__errno+0x8>)
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	2000000c 	.word	0x2000000c

08004d10 <__libc_init_array>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	4d0d      	ldr	r5, [pc, #52]	; (8004d48 <__libc_init_array+0x38>)
 8004d14:	4c0d      	ldr	r4, [pc, #52]	; (8004d4c <__libc_init_array+0x3c>)
 8004d16:	1b64      	subs	r4, r4, r5
 8004d18:	10a4      	asrs	r4, r4, #2
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	42a6      	cmp	r6, r4
 8004d1e:	d109      	bne.n	8004d34 <__libc_init_array+0x24>
 8004d20:	4d0b      	ldr	r5, [pc, #44]	; (8004d50 <__libc_init_array+0x40>)
 8004d22:	4c0c      	ldr	r4, [pc, #48]	; (8004d54 <__libc_init_array+0x44>)
 8004d24:	f000 f9be 	bl	80050a4 <_init>
 8004d28:	1b64      	subs	r4, r4, r5
 8004d2a:	10a4      	asrs	r4, r4, #2
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	42a6      	cmp	r6, r4
 8004d30:	d105      	bne.n	8004d3e <__libc_init_array+0x2e>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d38:	4798      	blx	r3
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7ee      	b.n	8004d1c <__libc_init_array+0xc>
 8004d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d42:	4798      	blx	r3
 8004d44:	3601      	adds	r6, #1
 8004d46:	e7f2      	b.n	8004d2e <__libc_init_array+0x1e>
 8004d48:	08018540 	.word	0x08018540
 8004d4c:	08018540 	.word	0x08018540
 8004d50:	08018540 	.word	0x08018540
 8004d54:	08018544 	.word	0x08018544

08004d58 <memset>:
 8004d58:	4402      	add	r2, r0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	f803 1b01 	strb.w	r1, [r3], #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <log10f>:
 8004d68:	b508      	push	{r3, lr}
 8004d6a:	ed2d 8b02 	vpush	{d8}
 8004d6e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d72:	f000 f845 	bl	8004e00 <__ieee754_log10f>
 8004d76:	eeb4 8a48 	vcmp.f32	s16, s16
 8004d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7e:	d60f      	bvs.n	8004da0 <log10f+0x38>
 8004d80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d88:	d80a      	bhi.n	8004da0 <log10f+0x38>
 8004d8a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	d108      	bne.n	8004da6 <log10f+0x3e>
 8004d94:	f7ff ffb6 	bl	8004d04 <__errno>
 8004d98:	2322      	movs	r3, #34	; 0x22
 8004d9a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004dbc <log10f+0x54>
 8004d9e:	6003      	str	r3, [r0, #0]
 8004da0:	ecbd 8b02 	vpop	{d8}
 8004da4:	bd08      	pop	{r3, pc}
 8004da6:	f7ff ffad 	bl	8004d04 <__errno>
 8004daa:	ecbd 8b02 	vpop	{d8}
 8004dae:	2321      	movs	r3, #33	; 0x21
 8004db0:	6003      	str	r3, [r0, #0]
 8004db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004db6:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <log10f+0x58>)
 8004db8:	f000 b87e 	b.w	8004eb8 <nanf>
 8004dbc:	ff800000 	.word	0xff800000
 8004dc0:	08018534 	.word	0x08018534

08004dc4 <sqrtf>:
 8004dc4:	b508      	push	{r3, lr}
 8004dc6:	ed2d 8b02 	vpush	{d8}
 8004dca:	eeb0 8a40 	vmov.f32	s16, s0
 8004dce:	f000 f86f 	bl	8004eb0 <__ieee754_sqrtf>
 8004dd2:	eeb4 8a48 	vcmp.f32	s16, s16
 8004dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dda:	d60c      	bvs.n	8004df6 <sqrtf+0x32>
 8004ddc:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004dfc <sqrtf+0x38>
 8004de0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de8:	d505      	bpl.n	8004df6 <sqrtf+0x32>
 8004dea:	f7ff ff8b 	bl	8004d04 <__errno>
 8004dee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004df2:	2321      	movs	r3, #33	; 0x21
 8004df4:	6003      	str	r3, [r0, #0]
 8004df6:	ecbd 8b02 	vpop	{d8}
 8004dfa:	bd08      	pop	{r3, pc}
 8004dfc:	00000000 	.word	0x00000000

08004e00 <__ieee754_log10f>:
 8004e00:	b508      	push	{r3, lr}
 8004e02:	ee10 2a10 	vmov	r2, s0
 8004e06:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004e0a:	ed2d 8b02 	vpush	{d8}
 8004e0e:	d108      	bne.n	8004e22 <__ieee754_log10f+0x22>
 8004e10:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e98 <__ieee754_log10f+0x98>
 8004e14:	eddf 7a21 	vldr	s15, [pc, #132]	; 8004e9c <__ieee754_log10f+0x9c>
 8004e18:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004e1c:	ecbd 8b02 	vpop	{d8}
 8004e20:	bd08      	pop	{r3, pc}
 8004e22:	2a00      	cmp	r2, #0
 8004e24:	da02      	bge.n	8004e2c <__ieee754_log10f+0x2c>
 8004e26:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004e2a:	e7f3      	b.n	8004e14 <__ieee754_log10f+0x14>
 8004e2c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004e30:	db02      	blt.n	8004e38 <__ieee754_log10f+0x38>
 8004e32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e36:	e7f1      	b.n	8004e1c <__ieee754_log10f+0x1c>
 8004e38:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004e3c:	bfbf      	itttt	lt
 8004e3e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8004ea0 <__ieee754_log10f+0xa0>
 8004e42:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004e46:	f06f 0118 	mvnlt.w	r1, #24
 8004e4a:	ee17 2a90 	vmovlt	r2, s15
 8004e4e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8004e52:	bfa8      	it	ge
 8004e54:	2100      	movge	r1, #0
 8004e56:	3b7f      	subs	r3, #127	; 0x7f
 8004e58:	440b      	add	r3, r1
 8004e5a:	0fd9      	lsrs	r1, r3, #31
 8004e5c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004e68:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8004e6c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004e70:	ee00 3a10 	vmov	s0, r3
 8004e74:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004e78:	f000 f824 	bl	8004ec4 <__ieee754_logf>
 8004e7c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004ea4 <__ieee754_log10f+0xa4>
 8004e80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e84:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ea8 <__ieee754_log10f+0xa8>
 8004e88:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004e8c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004eac <__ieee754_log10f+0xac>
 8004e90:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004e94:	e7c2      	b.n	8004e1c <__ieee754_log10f+0x1c>
 8004e96:	bf00      	nop
 8004e98:	cc000000 	.word	0xcc000000
 8004e9c:	00000000 	.word	0x00000000
 8004ea0:	4c000000 	.word	0x4c000000
 8004ea4:	3ede5bd9 	.word	0x3ede5bd9
 8004ea8:	355427db 	.word	0x355427db
 8004eac:	3e9a2080 	.word	0x3e9a2080

08004eb0 <__ieee754_sqrtf>:
 8004eb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004eb4:	4770      	bx	lr
	...

08004eb8 <nanf>:
 8004eb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004ec0 <nanf+0x8>
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	7fc00000 	.word	0x7fc00000

08004ec4 <__ieee754_logf>:
 8004ec4:	ee10 3a10 	vmov	r3, s0
 8004ec8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004ecc:	d106      	bne.n	8004edc <__ieee754_logf+0x18>
 8004ece:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005064 <__ieee754_logf+0x1a0>
 8004ed2:	eddf 7a65 	vldr	s15, [pc, #404]	; 8005068 <__ieee754_logf+0x1a4>
 8004ed6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004eda:	4770      	bx	lr
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	da02      	bge.n	8004ee6 <__ieee754_logf+0x22>
 8004ee0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004ee4:	e7f5      	b.n	8004ed2 <__ieee754_logf+0xe>
 8004ee6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004eea:	db02      	blt.n	8004ef2 <__ieee754_logf+0x2e>
 8004eec:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004ef0:	4770      	bx	lr
 8004ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef6:	bfb8      	it	lt
 8004ef8:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800506c <__ieee754_logf+0x1a8>
 8004efc:	485c      	ldr	r0, [pc, #368]	; (8005070 <__ieee754_logf+0x1ac>)
 8004efe:	bfbe      	ittt	lt
 8004f00:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004f04:	f06f 0118 	mvnlt.w	r1, #24
 8004f08:	ee17 3a90 	vmovlt	r3, s15
 8004f0c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8004f10:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004f14:	4418      	add	r0, r3
 8004f16:	bfa8      	it	ge
 8004f18:	2100      	movge	r1, #0
 8004f1a:	3a7f      	subs	r2, #127	; 0x7f
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8004f22:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8004f26:	4319      	orrs	r1, r3
 8004f28:	ee00 1a10 	vmov	s0, r1
 8004f2c:	4951      	ldr	r1, [pc, #324]	; (8005074 <__ieee754_logf+0x1b0>)
 8004f2e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8004f32:	f103 000f 	add.w	r0, r3, #15
 8004f36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004f3a:	4001      	ands	r1, r0
 8004f3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004f40:	bb89      	cbnz	r1, 8004fa6 <__ieee754_logf+0xe2>
 8004f42:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	d10f      	bne.n	8004f6c <__ieee754_logf+0xa8>
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	f000 8085 	beq.w	800505c <__ieee754_logf+0x198>
 8004f52:	ee07 2a90 	vmov	s15, r2
 8004f56:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8005078 <__ieee754_logf+0x1b4>
 8004f5a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800507c <__ieee754_logf+0x1b8>
 8004f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f62:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004f66:	eea7 0a87 	vfma.f32	s0, s15, s14
 8004f6a:	4770      	bx	lr
 8004f6c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005080 <__ieee754_logf+0x1bc>
 8004f70:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004f74:	eee0 7a66 	vfms.f32	s15, s0, s13
 8004f78:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f80:	b912      	cbnz	r2, 8004f88 <__ieee754_logf+0xc4>
 8004f82:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004f86:	4770      	bx	lr
 8004f88:	ee07 2a90 	vmov	s15, r2
 8004f8c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005078 <__ieee754_logf+0x1b4>
 8004f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f94:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8004f98:	ee37 0a40 	vsub.f32	s0, s14, s0
 8004f9c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800507c <__ieee754_logf+0x1b8>
 8004fa0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8004fa4:	4770      	bx	lr
 8004fa6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8004faa:	ee70 7a27 	vadd.f32	s15, s0, s15
 8004fae:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005084 <__ieee754_logf+0x1c0>
 8004fb2:	eddf 4a35 	vldr	s9, [pc, #212]	; 8005088 <__ieee754_logf+0x1c4>
 8004fb6:	4935      	ldr	r1, [pc, #212]	; (800508c <__ieee754_logf+0x1c8>)
 8004fb8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8004fbc:	4419      	add	r1, r3
 8004fbe:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8004fc2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	ee07 2a90 	vmov	s15, r2
 8004fce:	ee26 5a06 	vmul.f32	s10, s12, s12
 8004fd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fd6:	ee25 7a05 	vmul.f32	s14, s10, s10
 8004fda:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8005090 <__ieee754_logf+0x1cc>
 8004fde:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004fe2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8005094 <__ieee754_logf+0x1d0>
 8004fe6:	eee7 5a87 	vfma.f32	s11, s15, s14
 8004fea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005098 <__ieee754_logf+0x1d4>
 8004fee:	eee7 7a24 	vfma.f32	s15, s14, s9
 8004ff2:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800509c <__ieee754_logf+0x1d8>
 8004ff6:	eee7 4a87 	vfma.f32	s9, s15, s14
 8004ffa:	eddf 7a29 	vldr	s15, [pc, #164]	; 80050a0 <__ieee754_logf+0x1dc>
 8004ffe:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005002:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005006:	eee5 7a87 	vfma.f32	s15, s11, s14
 800500a:	dd1c      	ble.n	8005046 <__ieee754_logf+0x182>
 800500c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005010:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005014:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800501c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005020:	b922      	cbnz	r2, 800502c <__ieee754_logf+0x168>
 8005022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005026:	ee30 0a67 	vsub.f32	s0, s0, s15
 800502a:	4770      	bx	lr
 800502c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8005078 <__ieee754_logf+0x1b4>
 8005030:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005038:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800503c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800507c <__ieee754_logf+0x1b8>
 8005040:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8005044:	4770      	bx	lr
 8005046:	ee70 7a67 	vsub.f32	s15, s0, s15
 800504a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800504e:	2a00      	cmp	r2, #0
 8005050:	d0e9      	beq.n	8005026 <__ieee754_logf+0x162>
 8005052:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005078 <__ieee754_logf+0x1b4>
 8005056:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800505a:	e7ed      	b.n	8005038 <__ieee754_logf+0x174>
 800505c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005068 <__ieee754_logf+0x1a4>
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	cc000000 	.word	0xcc000000
 8005068:	00000000 	.word	0x00000000
 800506c:	4c000000 	.word	0x4c000000
 8005070:	004afb20 	.word	0x004afb20
 8005074:	007ffff0 	.word	0x007ffff0
 8005078:	3717f7d1 	.word	0x3717f7d1
 800507c:	3f317180 	.word	0x3f317180
 8005080:	3eaaaaab 	.word	0x3eaaaaab
 8005084:	3e1cd04f 	.word	0x3e1cd04f
 8005088:	3e178897 	.word	0x3e178897
 800508c:	ffcf5c30 	.word	0xffcf5c30
 8005090:	3e638e29 	.word	0x3e638e29
 8005094:	3ecccccd 	.word	0x3ecccccd
 8005098:	3e3a3325 	.word	0x3e3a3325
 800509c:	3e924925 	.word	0x3e924925
 80050a0:	3f2aaaab 	.word	0x3f2aaaab

080050a4 <_init>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr

080050b0 <_fini>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr
